---
kind: pipeline
type: kubernetes
name: build-linux-amd64
environment:
  RUNTIME: go1.16.2
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  commands:
  - mkdir -p /go/src/github.com/gravitational/teleport
  - cd /go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -m 0700 /root/.ssh && echo -n "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa
    && chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - git submodule update --init --recursive webassets || true
  - rm -f /root/.ssh/id_rsa
  - mkdir -p /go/cache /go/artifacts
  - if [[ "${DRONE_TAG}" != "" ]]; then echo "${DRONE_TAG##v}" > /go/.version.txt;
    else egrep ^VERSION Makefile | cut -d= -f2 > /go/.version.txt; fi; cat /go/.version.txt
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
- name: Build artifacts
  image: docker
  commands:
  - apk add --no-cache make
  - chown -R $UID:$GID /go
  - cd /go/src/github.com/gravitational/teleport
  - make -C build.assets release-amd64
  environment:
    ARCH: amd64
    GID: "1000"
    GOCACHE: /go/cache
    GOPATH: /go
    OS: linux
    UID: "1000"
  volumes:
  - name: dockersock
    path: /var/run
- name: Copy artifacts
  image: docker
  commands:
  - cd /go/src/github.com/gravitational/teleport
  - find . -maxdepth 1 -iname "teleport*.tar.gz" -print -exec cp {} /go/artifacts
    \;
  - find e/ -maxdepth 1 -iname "teleport*.tar.gz" -print -exec cp {} /go/artifacts
    \;
  - cd /go/artifacts && for FILE in teleport*.tar.gz; do sha256sum $FILE > $FILE.sha256;
    done && ls -l
- name: Upload to S3
  image: plugins/s3
  settings:
    access_key:
      from_secret: AWS_ACCESS_KEY_ID
    bucket:
      from_secret: AWS_S3_BUCKET
    region: us-west-2
    secret_key:
      from_secret: AWS_SECRET_ACCESS_KEY
    source: /go/artifacts/*
    strip_prefix: /go/artifacts/
    target: teleport/tag/${DRONE_TAG##v}
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
kind: pipeline
type: kubernetes
name: build-docker-images

environment:
  RUNTIME: go1.16.2

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/v*
  repo:
    include:
      - gravitational/*

workspace:
  path: /go

clone:
  disable: true

steps:
  - name: Check out code
    image: docker:git
    environment:
      GITHUB_PRIVATE_KEY:
        from_secret: GITHUB_PRIVATE_KEY
      GOCACHE: /go/cache
    commands:
      - mkdir -p /go/src/github.com/gravitational/teleport
      - cd /go/src/github.com/gravitational/teleport
      - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
      - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
      # fetch enterprise submodules
      - mkdir -m 0700 /root/.ssh && echo -n "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa && chmod 600 /root/.ssh/id_rsa
      - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
      - git submodule update --init e
      # this is allowed to fail because pre-4.3 Teleport versions don't use the webassets submodule
      - git submodule update --init --recursive webassets || true
      - rm -f /root/.ssh/id_rsa
      # create necessary directories
      - mkdir -p /go/artifacts $GOCACHE
      # set version
      - if [[ "${DRONE_TAG}" != "" ]]; then echo "${DRONE_TAG##v}" > /go/.version.txt; else egrep ^VERSION Makefile | cut -d= -f2 > /go/.version.txt; fi; cat /go/.version.txt

  - name: Build/push OSS/Enterprise Docker images
    image: docker
    environment:
      UID: 1000
      GID: 1000
      GOCACHE: /go/cache
      GOPATH: /go
      OS: linux
      ARCH: amd64
    settings:
      username:
        from_secret: QUAYIO_DOCKER_USERNAME
      password:
        from_secret: QUAYIO_DOCKER_PASSWORD
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make
      - chown -R $UID:$GID /go
      - docker login -u="$PLUGIN_USERNAME" -p="$PLUGIN_PASSWORD" quay.io
      - docker pull quay.io/gravitational/teleport-buildbox:$RUNTIME || true
      - cd /go/src/github.com/gravitational/teleport
      - make image-ci publish-ci

  - name: Build/push FIPS Docker image
    image: docker
    environment:
      UID: 1000
      GID: 1000
      GOCACHE: /go/cache
      GOPATH: /go
      OS: linux
      ARCH: amd64
    settings:
      username:
        from_secret: QUAYIO_DOCKER_USERNAME
      password:
        from_secret: QUAYIO_DOCKER_PASSWORD
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make
      - chown -R $UID:$GID /go
      - docker login -u="$PLUGIN_USERNAME" -p="$PLUGIN_PASSWORD" quay.io
      - docker pull quay.io/gravitational/teleport-buildbox:$RUNTIME || true
      - cd /go/src/github.com/gravitational/teleport
      # VERSION needs to be set manually when running in the e directory.
      # Normally, the version is set and exported by the root Makefile and then inherited,
      # but this is not the case for FIPS builds (which only run in e/Makefile)
      - export VERSION=$(cat /go/.version.txt)
      - make -C e image-fips-ci publish-fips-ci

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/buildbox.go:58
################################################

kind: pipeline
type: kubernetes
name: build-buildboxes
environment:
  GID: "1000"
  RUNTIME: go1.16.2
  UID: "1000"
trigger:
  event:
    include:
    - push
  repo:
    include:
    - gravitational/teleport
  branch:
    include:
    - master
workspace:
  path: /go/src/github.com/gravitational/teleport
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  commands:
  - git clone --depth 1 --single-branch --branch ${DRONE_SOURCE_BRANCH:-master} https://github.com/gravitational/${DRONE_REPO_NAME}.git
    .
  - git checkout ${DRONE_COMMIT}
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
- name: buildbox
  image: docker
  commands:
  - apk add --no-cache make
  - chown -R $UID:$GID /go
  - docker login -u="$$QUAYIO_DOCKER_USERNAME" -p="$$QUAYIO_DOCKER_PASSWORD" quay.io
  - make -C build.assets buildbox
  - docker push quay.io/gravitational/teleport-buildbox:$RUNTIME
  environment:
    QUAYIO_DOCKER_PASSWORD:
      from_secret: QUAYIO_DOCKER_PASSWORD
    QUAYIO_DOCKER_USERNAME:
      from_secret: QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
- name: buildbox-fips
  image: docker
  commands:
  - apk add --no-cache make
  - chown -R $UID:$GID /go
  - docker login -u="$$QUAYIO_DOCKER_USERNAME" -p="$$QUAYIO_DOCKER_PASSWORD" quay.io
  - make -C build.assets buildbox-fips
  - docker push quay.io/gravitational/teleport-buildbox-fips:$RUNTIME
  environment:
    QUAYIO_DOCKER_PASSWORD:
      from_secret: QUAYIO_DOCKER_PASSWORD
    QUAYIO_DOCKER_USERNAME:
      from_secret: QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
- name: buildbox-centos6
  image: docker
  commands:
  - apk add --no-cache make
  - chown -R $UID:$GID /go
  - docker login -u="$$QUAYIO_DOCKER_USERNAME" -p="$$QUAYIO_DOCKER_PASSWORD" quay.io
  - make -C build.assets buildbox-centos6
  - docker push quay.io/gravitational/teleport-buildbox-centos6:$RUNTIME
  environment:
    QUAYIO_DOCKER_PASSWORD:
      from_secret: QUAYIO_DOCKER_PASSWORD
    QUAYIO_DOCKER_USERNAME:
      from_secret: QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
- name: buildbox-arm
  image: docker
  commands:
  - apk add --no-cache make
  - chown -R $UID:$GID /go
  - docker login -u="$$QUAYIO_DOCKER_USERNAME" -p="$$QUAYIO_DOCKER_PASSWORD" quay.io
  - make -C build.assets buildbox-arm
  - docker push quay.io/gravitational/teleport-buildbox-arm:$RUNTIME
  environment:
    QUAYIO_DOCKER_PASSWORD:
      from_secret: QUAYIO_DOCKER_PASSWORD
    QUAYIO_DOCKER_USERNAME:
      from_secret: QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
kind: pipeline
type: kubernetes
name: promote-build

trigger:
  event:
    - promote
  target:
    - production
  repo:
    include:
      - gravitational/*

workspace:
  path: /go

clone:
  disable: true

steps:
  - name: Check out code
    image: docker:git
    commands:
      - |
        mkdir -p /go/src/github.com/gravitational/teleport
        cd /go/src/github.com/gravitational/teleport
        git init && git remote add origin ${DRONE_REMOTE_URL}
        git fetch origin +refs/tags/${DRONE_TAG}:
        git checkout -qf FETCH_HEAD

  # Download all previously packaged charts. This is needed to rebuild the
  # index and re-publish the repository.
  - name: "Helm: Download chart repository"
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
    commands:
      - mkdir -p /go/chart
      - aws s3 sync s3://$AWS_S3_BUCKET/ /go/chart

  - name: "Helm: Package chart repository"
    image: alpine/helm:latest
    commands:
      - cd /go/chart
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-cluster
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-kube-agent
      # copy index.html to root of the S3 bucket.
      - cp /go/src/github.com/gravitational/teleport/examples/chart/index.html /go/chart
      # this will index all previous versions of the charts downloaded from the S3 bucket,
      # plus the just-packaged charts listed above
      - helm repo index /go/chart

  - name: "Helm: Publish chart repository to S3"
    image: plugins/s3
    settings:
      bucket:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
      access_key:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
      region: us-east-2
      acl: public-read
      source: /go/chart/*
      target: /
      strip_prefix: /go/chart

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmpfs
        path: /tmpfs

volumes:
  - name: dockersock
    temp: {}
  - name: tmpfs
    temp:
      medium: memory
  # these persistent volumes cache RPMs/DEBs near Drone so that we don't need to download the
  # entire repo contents from S3 every time to build the repo, we just sync any differences
  - name: rpmrepo
    claim:
      name: drone-s3-rpmrepo-pvc
  - name: debrepo
    claim:
      name: drone-s3-debrepo-pvc
---
kind: signature
hmac: 6ba054198f28e07820884d3cc424e23a45b64557d14246aafaa88abb84a8697c

...
