---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/mac.go:39
################################################

kind: pipeline
type: exec
name: push-build-darwin-amd64
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /tmp/push-build-darwin-amd64
platform:
  os: darwin
  arch: amd64
clone:
  disable: true
concurrency:
  limit: 1
steps:
- name: Set up exec runner storage
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Check out code
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - git clone https://github.com/gravitational/webapps.git .
  - git checkout $(go run $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets/tooling/cmd/get-webapps-version/main.go)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - mkdir -m 0700 $WORKSPACE_DIR/.ssh && echo "$GITHUB_PRIVATE_KEY" > $WORKSPACE_DIR/.ssh/id_rsa
    && chmod 600 $WORKSPACE_DIR/.ssh/id_rsa
  - ssh-keyscan -H github.com > $WORKSPACE_DIR/.ssh/known_hosts 2>/dev/null
  - chmod 600 $WORKSPACE_DIR/.ssh/known_hosts
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init e
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init --recursive webassets || true
  - rm -rf $WORKSPACE_DIR/.ssh
  - mkdir -p $WORKSPACE_DIR/go/cache
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Install Go Toolchain
  commands:
  - set -u
  - mkdir -p /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - curl --silent -O https://dl.google.com/go/$RUNTIME.darwin-amd64.tar.gz
  - tar -C  /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains -xzf $RUNTIME.darwin-amd64.tar.gz
  - rm -rf $RUNTIME.darwin-amd64.tar.gz
  environment:
    RUNTIME: go1.18.3
- name: Install Rust Toolchain
  commands:
  - set -u
  - export PATH=/Users/$(whoami)/.cargo/bin:$PATH
  - mkdir -p /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - rustup toolchain install $RUST_VERSION
  environment:
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Install Node Toolchain
  commands:
  - set -u
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export NODE_DIR=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - mkdir -p $TOOLCHAIN_DIR
  - curl --silent -O https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-darwin-x64.tar.gz
  - tar -C $TOOLCHAIN_DIR -xzf node-v$NODE_VERSION-darwin-x64.tar.gz
  - rm -f node-v$NODE_VERSION-darwin-x64.tar.gz
  - export PATH=$NODE_DIR/bin:$PATH
  - corepack enable yarn
  - echo Node reporting version $(node --version)
  - echo Yarn reporting version $(yarn --version)
  environment:
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Build Mac artifacts
  commands:
  - set -u
  - echo HOME=$${HOME}
  - export HOME=/Users/$(whoami)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
    print-version)
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - export NODE_HOME=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - export PATH=$TOOLCHAIN_DIR/go/bin:$CARGO_HOME/bin:/Users/build/.cargo/bin:$NODE_HOME/bin:$PATH
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - build.assets/build-fido2-macos.sh build
  - export PKG_CONFIG_PATH="$(build.assets/build-fido2-macos.sh pkg_config_path)"
  - rustup override set $RUST_VERSION
  - export BUILD_NUMBER=$DRONE_BUILD_NUMBER
  - export CSC_NAME=0FFD3E3413AB4C599C53FBB1D8CA690915E33D83
  - make clean release OS=$OS ARCH=$ARCH FIDO2=yes TOUCHID=yes
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - yarn install && yarn build-term && yarn package-term -c.extraMetadata.version=$VERSION
  environment:
    ARCH: amd64
    BUILDBOX_PASSWORD:
      from_secret: BUILDBOX_PASSWORD
    GOCACHE: /tmp/push-build-darwin-amd64/go/cache
    GOPATH: /tmp/push-build-darwin-amd64/go
    OS: darwin
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Clean up toolchains (post)
  commands:
  - set -u
  - export PATH=/Users/$(whoami)/.cargo/bin:$PATH
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - rustup override unset
  - rustup toolchain uninstall $RUST_VERSION
  - rm -rf /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED
  environment:
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
  when:
    status:
    - success
    - failure
- name: Clean up exec runner storage (post)
  commands:
  - set -u
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/push-build-darwin-amd64
- name: Send Slack notification (exec)
  commands:
  - |2

    export DRONE_BUILD_LINK="${DRONE_SYSTEM_PROTO}://${DRONE_SYSTEM_HOSTNAME}/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/${DRONE_BUILD_NUMBER}"
    export GOOS=$(go env GOOS)
    export GOARCH=$(go env GOARCH)
  - |2-

    curl -sL -X POST -H 'Content-type: application/json' --data "{\"text\":\"Warning: \`${GOOS}-${GOARCH}\` artifact build failed for [\`${DRONE_REPO_NAME}\`] - please investigate immediately!\nBranch: \`${DRONE_BRANCH}\`\nCommit: \`${DRONE_COMMIT_SHA}\`\nLink: $DRONE_BUILD_LINK\"}" $SLACK_WEBHOOK_DEV_TELEPORT
  environment:
    SLACK_WEBHOOK_DEV_TELEPORT:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/mac.go:39
################################################

kind: pipeline
type: exec
name: build-darwin-amd64
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /tmp/build-darwin-amd64
platform:
  os: darwin
  arch: amd64
clone:
  disable: true
concurrency:
  limit: 1
steps:
- name: Set up exec runner storage
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Check out code
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - git clone https://github.com/gravitational/webapps.git .
  - git checkout $(go run $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets/tooling/cmd/get-webapps-version/main.go)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - mkdir -m 0700 $WORKSPACE_DIR/.ssh && echo "$GITHUB_PRIVATE_KEY" > $WORKSPACE_DIR/.ssh/id_rsa
    && chmod 600 $WORKSPACE_DIR/.ssh/id_rsa
  - ssh-keyscan -H github.com > $WORKSPACE_DIR/.ssh/known_hosts 2>/dev/null
  - chmod 600 $WORKSPACE_DIR/.ssh/known_hosts
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init e
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init --recursive webassets || true
  - rm -rf $WORKSPACE_DIR/.ssh
  - mkdir -p $WORKSPACE_DIR/go/cache
  - mkdir -p $WORKSPACE_DIR/go/artifacts
  - echo "${DRONE_TAG##v}" > $WORKSPACE_DIR/go/.version.txt
  - cat $WORKSPACE_DIR/go/.version.txt
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Install Go Toolchain
  commands:
  - set -u
  - mkdir -p /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - curl --silent -O https://dl.google.com/go/$RUNTIME.darwin-amd64.tar.gz
  - tar -C  /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains -xzf $RUNTIME.darwin-amd64.tar.gz
  - rm -rf $RUNTIME.darwin-amd64.tar.gz
  environment:
    RUNTIME: go1.18.3
- name: Install Rust Toolchain
  commands:
  - set -u
  - export PATH=/Users/$(whoami)/.cargo/bin:$PATH
  - mkdir -p /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - rustup toolchain install $RUST_VERSION
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Install Node Toolchain
  commands:
  - set -u
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export NODE_DIR=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - mkdir -p $TOOLCHAIN_DIR
  - curl --silent -O https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-darwin-x64.tar.gz
  - tar -C $TOOLCHAIN_DIR -xzf node-v$NODE_VERSION-darwin-x64.tar.gz
  - rm -f node-v$NODE_VERSION-darwin-x64.tar.gz
  - export PATH=$NODE_DIR/bin:$PATH
  - corepack enable yarn
  - echo Node reporting version $(node --version)
  - echo Yarn reporting version $(yarn --version)
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Build Mac release artifacts
  commands:
  - set -u
  - echo HOME=$${HOME}
  - export HOME=/Users/$(whoami)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
    print-version)
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - export NODE_HOME=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - export PATH=$TOOLCHAIN_DIR/go/bin:$CARGO_HOME/bin:/Users/build/.cargo/bin:$NODE_HOME/bin:$PATH
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - build.assets/build-fido2-macos.sh build
  - export PKG_CONFIG_PATH="$(build.assets/build-fido2-macos.sh pkg_config_path)"
  - rustup override set $RUST_VERSION
  - export BUILD_NUMBER=$DRONE_BUILD_NUMBER
  - export CSC_NAME=0FFD3E3413AB4C599C53FBB1D8CA690915E33D83
  - make clean release OS=$OS ARCH=$ARCH FIDO2=yes TOUCHID=yes
  environment:
    APPLE_PASSWORD:
      from_secret: APPLE_PASSWORD
    APPLE_USERNAME:
      from_secret: APPLE_USERNAME
    ARCH: amd64
    BUILDBOX_PASSWORD:
      from_secret: BUILDBOX_PASSWORD
    GOCACHE: /tmp/build-darwin-amd64/go/cache
    GOPATH: /tmp/build-darwin-amd64/go
    OS: darwin
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Copy Mac artifacts
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cp teleport*.tar.gz $WORKSPACE_DIR/go/artifacts
  - cp e/teleport-ent*.tar.gz $WORKSPACE_DIR/go/artifacts
  - cd $WORKSPACE_DIR/go/artifacts && for FILE in teleport*.tar.gz; do shasum -a 256
    $FILE > $FILE.sha256; done && ls -l
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Upload to S3
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/artifacts
  - aws s3 sync . s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64
- name: Register artifacts
  commands:
  - WORKSPACE_DIR=$${WORKSPACE_DIR:-/}
  - VERSION=$(cat "$WORKSPACE_DIR/go/.version.txt")
  - RELEASES_HOST='https://releases-staging.platform.teleport.sh'
  - echo "$RELEASES_CERT" | base64 -d > "$WORKSPACE_DIR/releases.crt"
  - echo "$RELEASES_KEY" | base64 -d > "$WORKSPACE_DIR/releases.key"
  - trap "rm -f '$WORKSPACE_DIR/releases.crt' '$WORKSPACE_DIR/releases.key'" EXIT
  - CREDENTIALS="--cert $WORKSPACE_DIR/releases.crt --key $WORKSPACE_DIR/releases.key"
  - which curl || apk add --no-cache curl
  - |-
    cd "$WORKSPACE_DIR/go/artifacts"
    find . -type f ! -iname '*.sha256' ! -iname '*-unsigned.zip*' | while read -r file; do
      # Skip files that are not results of this build
      # (e.g. tarballs from which OS packages are made)
      [ -f "$file.sha256" ] || continue

      name="$(basename "$file" | sed -E 's/(-|_)v?[0-9].*$//')" # extract part before -vX.Y.Z
      description="MacOS Intel"
      products="$name"
      if [ "$name" = "tsh" ]; then
        products="teleport teleport-ent"
      elif [ "$name" = "Teleport Connect" ]; then
        description="Teleport Connect"
        products="teleport teleport-ent"
      fi
      shasum="$(cat "$file.sha256" | cut -d ' ' -f 1)"

      curl $CREDENTIALS --fail -o /dev/null -F description="$description" -F os="darwin" -F arch="amd64" -F "file=@$file" -F "sha256=$shasum" "$RELEASES_HOST/assets";

      for product in $products; do
        status_code=$(curl $CREDENTIALS -o "$WORKSPACE_DIR/curl_out.txt" -w "%{http_code}" -F "product=$product" -F "version=$VERSION" -F notesMd="# Teleport $VERSION" -F status=draft "$RELEASES_HOST/releases")
        if [ $status_code -ne 200 ] && [ $status_code -ne 409 ]; then
          echo "curl HTTP status: $status_code"
          cat $WORKSPACE_DIR/curl_out.txt
          exit 1
        fi
        curl $CREDENTIALS --fail -o /dev/null -X PUT "$RELEASES_HOST/releases/$product@$VERSION/assets/$(basename "$file" | sed 's/ /%20/g')"
      done
    done
  environment:
    RELEASES_CERT:
      from_secret: RELEASES_CERT_STAGING
    RELEASES_KEY:
      from_secret: RELEASES_KEY_STAGING
    WORKSPACE_DIR: /tmp/build-darwin-amd64
  failure: ignore
- name: Clean up toolchains (post)
  commands:
  - set -u
  - export PATH=/Users/$(whoami)/.cargo/bin:$PATH
  - export CARGO_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/cargo
  - export RUST_HOME=$CARGO_HOME
  - export RUSTUP_HOME=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains/rustup
  - export RUST_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-rust-version)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - rustup override unset
  - rustup toolchain uninstall $RUST_VERSION
  - rm -rf /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64
  when:
    status:
    - success
    - failure
- name: Clean up exec runner storage (post)
  commands:
  - set -u
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/mac.go:39
################################################

kind: pipeline
type: exec
name: build-darwin-amd64-pkg
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /tmp/build-darwin-amd64-pkg
platform:
  os: darwin
  arch: amd64
clone:
  disable: true
depends_on:
- build-darwin-amd64
concurrency:
  limit: 1
steps:
- name: Set up exec runner storage
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Check out code
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - git clone https://github.com/gravitational/webapps.git .
  - git checkout $(go run $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets/tooling/cmd/get-webapps-version/main.go)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - mkdir -m 0700 $WORKSPACE_DIR/.ssh && echo "$GITHUB_PRIVATE_KEY" > $WORKSPACE_DIR/.ssh/id_rsa
    && chmod 600 $WORKSPACE_DIR/.ssh/id_rsa
  - ssh-keyscan -H github.com > $WORKSPACE_DIR/.ssh/known_hosts 2>/dev/null
  - chmod 600 $WORKSPACE_DIR/.ssh/known_hosts
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init e
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init --recursive webassets || true
  - rm -rf $WORKSPACE_DIR/.ssh
  - mkdir -p $WORKSPACE_DIR/go/cache
  - mkdir -p $WORKSPACE_DIR/go/artifacts
  - echo "${DRONE_TAG##v}" > $WORKSPACE_DIR/go/.version.txt
  - cat $WORKSPACE_DIR/go/.version.txt
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Download built tarball artifacts from S3
  commands:
  - set -u
  - export VERSION=$(cat $WORKSPACE_DIR/go/.version.txt)
  - export S3_PATH="tag/$${DRONE_TAG##v}/"
  - aws s3 cp s3://$AWS_S3_BUCKET/teleport/$${S3_PATH}teleport-v$${VERSION}-darwin-amd64-bin.tar.gz
    $WORKSPACE_DIR/go/artifacts/
  - aws s3 cp s3://$AWS_S3_BUCKET/teleport/$${S3_PATH}teleport-ent-v$${VERSION}-darwin-amd64-bin.tar.gz
    $WORKSPACE_DIR/go/artifacts/
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Build Mac pkg release artifacts
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - export VERSION=$(cat $WORKSPACE_DIR/go/.version.txt)
  - export HOME=/Users/build
  - security unlock-keychain -p $${BUILDBOX_PASSWORD} login.keychain
  - security find-identity -v
  - make pkg OS=$OS ARCH=$ARCH
  environment:
    APPLE_PASSWORD:
      from_secret: APPLE_PASSWORD
    APPLE_USERNAME:
      from_secret: APPLE_USERNAME
    ARCH: amd64
    BUILDBOX_PASSWORD:
      from_secret: BUILDBOX_PASSWORD
    ENT_TARBALL_PATH: /tmp/build-darwin-amd64-pkg/go/artifacts
    OS: darwin
    OSS_TARBALL_PATH: /tmp/build-darwin-amd64-pkg/go/artifacts
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Copy Mac pkg artifacts
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - rm -rf $WORKSPACE_DIR/go/artifacts/*.tar.gz
  - cp build/teleport*.pkg e/build/teleport-ent*.pkg $WORKSPACE_DIR/go/artifacts/
  - cd $WORKSPACE_DIR/go/artifacts && for FILE in *.pkg; do shasum -a 256 $FILE >
    $FILE.sha256; done && ls -l
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Upload to S3
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/artifacts
  - aws s3 sync . s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
- name: Register artifacts
  commands:
  - WORKSPACE_DIR=$${WORKSPACE_DIR:-/}
  - VERSION=$(cat "$WORKSPACE_DIR/go/.version.txt")
  - RELEASES_HOST='https://releases-staging.platform.teleport.sh'
  - echo "$RELEASES_CERT" | base64 -d > "$WORKSPACE_DIR/releases.crt"
  - echo "$RELEASES_KEY" | base64 -d > "$WORKSPACE_DIR/releases.key"
  - trap "rm -f '$WORKSPACE_DIR/releases.crt' '$WORKSPACE_DIR/releases.key'" EXIT
  - CREDENTIALS="--cert $WORKSPACE_DIR/releases.crt --key $WORKSPACE_DIR/releases.key"
  - which curl || apk add --no-cache curl
  - |-
    cd "$WORKSPACE_DIR/go/artifacts"
    find . -type f ! -iname '*.sha256' ! -iname '*-unsigned.zip*' | while read -r file; do
      # Skip files that are not results of this build
      # (e.g. tarballs from which OS packages are made)
      [ -f "$file.sha256" ] || continue

      name="$(basename "$file" | sed -E 's/(-|_)v?[0-9].*$//')" # extract part before -vX.Y.Z
      description="MacOS Intel .pkg installer"
      products="$name"
      if [ "$name" = "tsh" ]; then
        products="teleport teleport-ent"
      elif [ "$name" = "Teleport Connect" ]; then
        description="Teleport Connect"
        products="teleport teleport-ent"
      fi
      shasum="$(cat "$file.sha256" | cut -d ' ' -f 1)"

      curl $CREDENTIALS --fail -o /dev/null -F description="$description" -F os="darwin" -F arch="amd64" -F "file=@$file" -F "sha256=$shasum" "$RELEASES_HOST/assets";

      for product in $products; do
        status_code=$(curl $CREDENTIALS -o "$WORKSPACE_DIR/curl_out.txt" -w "%{http_code}" -F "product=$product" -F "version=$VERSION" -F notesMd="# Teleport $VERSION" -F status=draft "$RELEASES_HOST/releases")
        if [ $status_code -ne 200 ] && [ $status_code -ne 409 ]; then
          echo "curl HTTP status: $status_code"
          cat $WORKSPACE_DIR/curl_out.txt
          exit 1
        fi
        curl $CREDENTIALS --fail -o /dev/null -X PUT "$RELEASES_HOST/releases/$product@$VERSION/assets/$(basename "$file" | sed 's/ /%20/g')"
      done
    done
  environment:
    RELEASES_CERT:
      from_secret: RELEASES_CERT_STAGING
    RELEASES_KEY:
      from_secret: RELEASES_KEY_STAGING
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg
  failure: ignore
- name: Clean up exec runner storage (post)
  commands:
  - set -u
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/mac.go:39
################################################

kind: pipeline
type: exec
name: build-darwin-amd64-pkg-tsh
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /tmp/build-darwin-amd64-pkg-tsh
platform:
  os: darwin
  arch: amd64
clone:
  disable: true
depends_on:
- build-darwin-amd64
concurrency:
  limit: 1
steps:
- name: Set up exec runner storage
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Check out code
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - git clone https://github.com/gravitational/webapps.git .
  - git checkout $(go run $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets/tooling/cmd/get-webapps-version/main.go)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - mkdir -m 0700 $WORKSPACE_DIR/.ssh && echo "$GITHUB_PRIVATE_KEY" > $WORKSPACE_DIR/.ssh/id_rsa
    && chmod 600 $WORKSPACE_DIR/.ssh/id_rsa
  - ssh-keyscan -H github.com > $WORKSPACE_DIR/.ssh/known_hosts 2>/dev/null
  - chmod 600 $WORKSPACE_DIR/.ssh/known_hosts
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init e
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init --recursive webassets || true
  - rm -rf $WORKSPACE_DIR/.ssh
  - mkdir -p $WORKSPACE_DIR/go/cache
  - mkdir -p $WORKSPACE_DIR/go/artifacts
  - echo "${DRONE_TAG##v}" > $WORKSPACE_DIR/go/.version.txt
  - cat $WORKSPACE_DIR/go/.version.txt
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Download built tarball artifacts from S3
  commands:
  - set -u
  - export VERSION=$(cat $WORKSPACE_DIR/go/.version.txt)
  - export S3_PATH="tag/$${DRONE_TAG##v}/"
  - aws s3 cp s3://$AWS_S3_BUCKET/teleport/$${S3_PATH}teleport-v$${VERSION}-darwin-amd64-bin.tar.gz
    $WORKSPACE_DIR/go/artifacts/
  - aws s3 cp s3://$AWS_S3_BUCKET/teleport/$${S3_PATH}teleport-ent-v$${VERSION}-darwin-amd64-bin.tar.gz
    $WORKSPACE_DIR/go/artifacts/
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Build Mac pkg release artifacts
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - export VERSION=$(cat $WORKSPACE_DIR/go/.version.txt)
  - export HOME=/Users/build
  - security unlock-keychain -p $${BUILDBOX_PASSWORD} login.keychain
  - security find-identity -v
  - make pkg-tsh OS=$OS ARCH=$ARCH
  environment:
    APPLE_PASSWORD:
      from_secret: APPLE_PASSWORD
    APPLE_USERNAME:
      from_secret: APPLE_USERNAME
    ARCH: amd64
    BUILDBOX_PASSWORD:
      from_secret: BUILDBOX_PASSWORD
    ENT_TARBALL_PATH: /tmp/build-darwin-amd64-pkg-tsh/go/artifacts
    OS: darwin
    OSS_TARBALL_PATH: /tmp/build-darwin-amd64-pkg-tsh/go/artifacts
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Copy Mac pkg artifacts
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - rm -rf $WORKSPACE_DIR/go/artifacts/*.tar.gz
  - cp build/tsh*.pkg $WORKSPACE_DIR/go/artifacts/
  - cd $WORKSPACE_DIR/go/artifacts && for FILE in *.pkg; do shasum -a 256 $FILE >
    $FILE.sha256; done && ls -l
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Upload to S3
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/artifacts
  - aws s3 sync . s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
- name: Register artifacts
  commands:
  - WORKSPACE_DIR=$${WORKSPACE_DIR:-/}
  - VERSION=$(cat "$WORKSPACE_DIR/go/.version.txt")
  - RELEASES_HOST='https://releases-staging.platform.teleport.sh'
  - echo "$RELEASES_CERT" | base64 -d > "$WORKSPACE_DIR/releases.crt"
  - echo "$RELEASES_KEY" | base64 -d > "$WORKSPACE_DIR/releases.key"
  - trap "rm -f '$WORKSPACE_DIR/releases.crt' '$WORKSPACE_DIR/releases.key'" EXIT
  - CREDENTIALS="--cert $WORKSPACE_DIR/releases.crt --key $WORKSPACE_DIR/releases.key"
  - which curl || apk add --no-cache curl
  - |-
    cd "$WORKSPACE_DIR/go/artifacts"
    find . -type f ! -iname '*.sha256' ! -iname '*-unsigned.zip*' | while read -r file; do
      # Skip files that are not results of this build
      # (e.g. tarballs from which OS packages are made)
      [ -f "$file.sha256" ] || continue

      name="$(basename "$file" | sed -E 's/(-|_)v?[0-9].*$//')" # extract part before -vX.Y.Z
      description="MacOS Intel .pkg installer (tsh client only)"
      products="$name"
      if [ "$name" = "tsh" ]; then
        products="teleport teleport-ent"
      elif [ "$name" = "Teleport Connect" ]; then
        description="Teleport Connect"
        products="teleport teleport-ent"
      fi
      shasum="$(cat "$file.sha256" | cut -d ' ' -f 1)"

      curl $CREDENTIALS --fail -o /dev/null -F description="$description" -F os="darwin" -F arch="amd64" -F "file=@$file" -F "sha256=$shasum" "$RELEASES_HOST/assets";

      for product in $products; do
        status_code=$(curl $CREDENTIALS -o "$WORKSPACE_DIR/curl_out.txt" -w "%{http_code}" -F "product=$product" -F "version=$VERSION" -F notesMd="# Teleport $VERSION" -F status=draft "$RELEASES_HOST/releases")
        if [ $status_code -ne 200 ] && [ $status_code -ne 409 ]; then
          echo "curl HTTP status: $status_code"
          cat $WORKSPACE_DIR/curl_out.txt
          exit 1
        fi
        curl $CREDENTIALS --fail -o /dev/null -X PUT "$RELEASES_HOST/releases/$product@$VERSION/assets/$(basename "$file" | sed 's/ /%20/g')"
      done
    done
  environment:
    RELEASES_CERT:
      from_secret: RELEASES_CERT_STAGING
    RELEASES_KEY:
      from_secret: RELEASES_KEY_STAGING
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh
  failure: ignore
- name: Clean up exec runner storage (post)
  commands:
  - set -u
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-pkg-tsh

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/mac.go:39
################################################

kind: pipeline
type: exec
name: build-darwin-amd64-connect
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /tmp/build-darwin-amd64-connect
platform:
  os: darwin
  arch: amd64
clone:
  disable: true
depends_on:
- build-darwin-amd64-pkg-tsh
concurrency:
  limit: 1
steps:
- name: Set up exec runner storage
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Check out code
  commands:
  - set -u
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - git clone https://github.com/gravitational/${DRONE_REPO_NAME}.git .
  - git checkout ${DRONE_TAG:-$DRONE_COMMIT}
  - mkdir -p $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - git clone https://github.com/gravitational/webapps.git .
  - git checkout $(go run $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets/tooling/cmd/get-webapps-version/main.go)
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
  - mkdir -m 0700 $WORKSPACE_DIR/.ssh && echo "$GITHUB_PRIVATE_KEY" > $WORKSPACE_DIR/.ssh/id_rsa
    && chmod 600 $WORKSPACE_DIR/.ssh/id_rsa
  - ssh-keyscan -H github.com > $WORKSPACE_DIR/.ssh/known_hosts 2>/dev/null
  - chmod 600 $WORKSPACE_DIR/.ssh/known_hosts
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init e
  - GIT_SSH_COMMAND='ssh -i $WORKSPACE_DIR/.ssh/id_rsa -o UserKnownHostsFile=$WORKSPACE_DIR/.ssh/known_hosts
    -F /dev/null' git submodule update --init --recursive webassets || true
  - rm -rf $WORKSPACE_DIR/.ssh
  - mkdir -p $WORKSPACE_DIR/go/cache
  - mkdir -p $WORKSPACE_DIR/go/artifacts
  - echo "${DRONE_TAG##v}" > $WORKSPACE_DIR/go/.version.txt
  - cat $WORKSPACE_DIR/go/.version.txt
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Install Node Toolchain
  commands:
  - set -u
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export NODE_DIR=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - mkdir -p $TOOLCHAIN_DIR
  - curl --silent -O https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-darwin-x64.tar.gz
  - tar -C $TOOLCHAIN_DIR -xzf node-v$NODE_VERSION-darwin-x64.tar.gz
  - rm -f node-v$NODE_VERSION-darwin-x64.tar.gz
  - export PATH=$NODE_DIR/bin:$PATH
  - corepack enable yarn
  - echo Node reporting version $(node --version)
  - echo Yarn reporting version $(yarn --version)
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Download tsh.pkg artifact from S3
  commands:
  - set -u
  - export VERSION=$(cat $WORKSPACE_DIR/go/.version.txt)
  - export S3_PATH="tag/$${DRONE_TAG##v}/"
  - aws s3 cp s3://$AWS_S3_BUCKET/teleport/$${S3_PATH}tsh-$${VERSION}.pkg $WORKSPACE_DIR/go/src/github.com/gravitational/
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Build dmg artifact
  commands:
  - set -u
  - echo HOME=$${HOME}
  - export HOME=/Users/$(whoami)
  - export TOOLCHAIN_DIR=/tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED/toolchains
  - export VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport
    print-version)
  - export NODE_VERSION=$(make -C $WORKSPACE_DIR/go/src/github.com/gravitational/teleport/build.assets
    print-node-version)
  - export NODE_HOME=$TOOLCHAIN_DIR/node-v$NODE_VERSION-darwin-x64
  - export PATH=$NODE_HOME/bin:$PATH
  - export BUILD_NUMBER=$DRONE_BUILD_NUMBER
  - security unlock-keychain -p $${BUILDBOX_PASSWORD} login.keychain
  - security find-identity -v
  - export CSC_NAME=0FFD3E3413AB4C599C53FBB1D8CA690915E33D83
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational
  - pkgutil --expand-full tsh-$${VERSION}.pkg tsh
  - export CONNECT_TSH_APP_PATH=$WORKSPACE_DIR/go/src/github.com/gravitational/tsh/Payload/tsh.app
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps
  - yarn install && yarn build-term && yarn package-term -c.extraMetadata.version=$VERSION
  environment:
    APPLE_PASSWORD:
      from_secret: APPLE_PASSWORD
    APPLE_USERNAME:
      from_secret: APPLE_USERNAME
    ARCH: amd64
    BUILDBOX_PASSWORD:
      from_secret: BUILDBOX_PASSWORD
    GOCACHE: /tmp/build-darwin-amd64-connect/go/cache
    GOPATH: /tmp/build-darwin-amd64-connect/go
    OS: darwin
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Copy dmg artifact
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/src/github.com/gravitational/webapps/packages/teleterm/build/release
  - cp *.dmg $WORKSPACE_DIR/go/artifacts
  - cd $WORKSPACE_DIR/go/artifacts && for FILE in *.dmg; do shasum -a 256 "$FILE"
    > "$FILE.sha256"; done && ls -l
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Upload to S3
  commands:
  - set -u
  - cd $WORKSPACE_DIR/go/artifacts
  - aws s3 sync . s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_REGION: us-west-2
    AWS_S3_BUCKET:
      from_secret: AWS_S3_BUCKET
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
- name: Register artifact
  commands:
  - WORKSPACE_DIR=$${WORKSPACE_DIR:-/}
  - VERSION=$(cat "$WORKSPACE_DIR/go/.version.txt")
  - RELEASES_HOST='https://releases-staging.platform.teleport.sh'
  - echo "$RELEASES_CERT" | base64 -d > "$WORKSPACE_DIR/releases.crt"
  - echo "$RELEASES_KEY" | base64 -d > "$WORKSPACE_DIR/releases.key"
  - trap "rm -f '$WORKSPACE_DIR/releases.crt' '$WORKSPACE_DIR/releases.key'" EXIT
  - CREDENTIALS="--cert $WORKSPACE_DIR/releases.crt --key $WORKSPACE_DIR/releases.key"
  - which curl || apk add --no-cache curl
  - |-
    cd "$WORKSPACE_DIR/go/artifacts"
    find . -type f ! -iname '*.sha256' ! -iname '*-unsigned.zip*' | while read -r file; do
      # Skip files that are not results of this build
      # (e.g. tarballs from which OS packages are made)
      [ -f "$file.sha256" ] || continue

      name="$(basename "$file" | sed -E 's/(-|_)v?[0-9].*$//')" # extract part before -vX.Y.Z
      description="MacOS Intel"
      products="$name"
      if [ "$name" = "tsh" ]; then
        products="teleport teleport-ent"
      elif [ "$name" = "Teleport Connect" ]; then
        description="Teleport Connect"
        products="teleport teleport-ent"
      fi
      shasum="$(cat "$file.sha256" | cut -d ' ' -f 1)"

      curl $CREDENTIALS --fail -o /dev/null -F description="$description" -F os="darwin" -F arch="amd64" -F "file=@$file" -F "sha256=$shasum" "$RELEASES_HOST/assets";

      for product in $products; do
        status_code=$(curl $CREDENTIALS -o "$WORKSPACE_DIR/curl_out.txt" -w "%{http_code}" -F "product=$product" -F "version=$VERSION" -F notesMd="# Teleport $VERSION" -F status=draft "$RELEASES_HOST/releases")
        if [ $status_code -ne 200 ] && [ $status_code -ne 409 ]; then
          echo "curl HTTP status: $status_code"
          cat $WORKSPACE_DIR/curl_out.txt
          exit 1
        fi
        curl $CREDENTIALS --fail -o /dev/null -X PUT "$RELEASES_HOST/releases/$product@$VERSION/assets/$(basename "$file" | sed 's/ /%20/g')"
      done
    done
  environment:
    RELEASES_CERT:
      from_secret: RELEASES_CERT_STAGING
    RELEASES_KEY:
      from_secret: RELEASES_KEY_STAGING
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
  failure: ignore
- name: Clean up Node toolchain (post)
  commands:
  - set -u
  - rm -rf /tmp/build-$DRONE_BUILD_NUMBER-$DRONE_BUILD_CREATED
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
  when:
    status:
    - success
    - failure
- name: Clean up exec runner storage (post)
  commands:
  - set -u
  - chmod -R u+rw $WORKSPACE_DIR
  - rm -rf $WORKSPACE_DIR/go $WORKSPACE_DIR/.ssh
  environment:
    WORKSPACE_DIR: /tmp/build-darwin-amd64-connect
---
kind: signature
hmac: 299b2f73f7e386a0d240817c916586bbca1545c62cdc9dfaf6ef5b20da8146ee

...
