---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images.go:194
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-current-version-Test trigger on push
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  event:
    include:
    - push
  repo:
    include:
    - gravitational/teleport
  branch:
    include:
    - fred/arm-container-images
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Find the latest available semver for v10
  image: golang:1.18
  commands:
  - mkdir -pv "/tmp/teleport"
  - cd "/tmp/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "branch/v10"
  - mkdir -pv "/go/vars/full-version"
  - cd "/tmp/teleport/build.assets/tooling/cmd/query-latest"
  - go run . "v10" > "/go/vars/full-version/v10"
  - echo Found full semver "$(cat "/go/vars/full-version/v10")" for major version
    "v10"
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
- name: Check out code
  image: alpine/git:latest
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "$(cat '/go/vars/full-version/v10')"
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
- name: Download "teleport" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport/amd64"
  - apt download "teleport:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm"
  - apt download "teleport:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm64"
  - apt download "teleport:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport image "teleport-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-v10-amd64-builder" --target "teleport"
    --platform "linux/amd64" --tag "teleport-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm-builder"
  - docker buildx build --load --builder "teleport-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-v10-arm64-builder" --target "teleport"
    --platform "linux/arm64" --tag "teleport-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-amd64" "quay.io/gravitational/teleport:10-amd64"
  - docker push "quay.io/gravitational/teleport:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm" "quay.io/gravitational/teleport:10-arm"
  - docker push "quay.io/gravitational/teleport:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm64" "quay.io/gravitational/teleport:10-arm64"
  - docker push "quay.io/gravitational/teleport:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport:10" --amend "quay.io/gravitational/teleport:10-amd64"
    --amend "quay.io/gravitational/teleport:10-arm" --amend "quay.io/gravitational/teleport:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...l/teleport:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-amd64" "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm" "public.ecr.aws/gravitational/teleport:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm64" "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport:10" to ECR
    - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport:10" --amend "public.ecr.aws/gravitational/teleport:10-amd64"
    --amend "public.ecr.aws/gravitational/teleport:10-arm" --amend "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
- name: Download "teleport-ent" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent/amd64"
  - apt download "teleport-ent:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm"
  - apt download "teleport-ent:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm64"
  - apt download "teleport-ent:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent image "teleport-ent-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-amd64-builder" --target
    "teleport" --platform "linux/amd64" --tag "teleport-ent-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-ent-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm64-builder" --target
    "teleport" --platform "linux/arm64" --tag "teleport-ent-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-amd64" "quay.io/gravitational/teleport-ent:10-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm" "quay.io/gravitational/teleport-ent:10-arm"
  - docker push "quay.io/gravitational/teleport-ent:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm64" "quay.io/gravitational/teleport-ent:10-arm64"
  - docker push "quay.io/gravitational/teleport-ent:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10" --amend "quay.io/gravitational/teleport-ent:10-amd64"
    --amend "quay.io/gravitational/teleport-ent:10-arm" --amend "quay.io/gravitational/teleport-ent:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-ent:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm" "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm64" "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-amd64" --amend "public.ecr.aws/gravitational/teleport-ent:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR - production
- name: Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent-fips"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent-fips/amd64"
  - apt download "teleport-ent-fips:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent-fips/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent-fips:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-fips-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-fips-v10-amd64-builder" --target
    "teleport-fips" --platform "linux/amd64" --tag "teleport-ent-fips-v10-amd64" --file
    "/go/build/Dockerfile" --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb" /go/build
  - docker buildx rm "teleport-ent-fips-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-fips-v10-amd64" "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10-fips" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10-fips" --amend "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10-fips"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-fips-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-ent:10-$TIMESTAMP-fips"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-fips-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10-fips"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10-fips" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10-fips"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR - production
- name: Build teleport-lab image "teleport-lab-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-lab-v10-amd64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-amd64" /tmp/build
  - docker buildx rm "teleport-lab-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-amd64"
- name: Build teleport-lab image "teleport-lab-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-lab-v10-arm" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm"
- name: Build teleport-lab image "teleport-lab-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-lab-v10-arm64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm64" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-amd64" "quay.io/gravitational/teleport-lab:10-amd64"
  - docker push "quay.io/gravitational/teleport-lab:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm" "quay.io/gravitational/teleport-lab:10-arm"
  - docker push "quay.io/gravitational/teleport-lab:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm64" "quay.io/gravitational/teleport-lab:10-arm64"
  - docker push "quay.io/gravitational/teleport-lab:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-lab:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-lab:10" --amend "quay.io/gravitational/teleport-lab:10-amd64"
    --amend "quay.io/gravitational/teleport-lab:10-arm" --amend "quay.io/gravitational/teleport-lab:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-lab:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-lab:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-amd64" "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm" "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm64" "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-lab:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-lab:10" --amend
    "public.ecr.aws/gravitational/teleport-lab:10-amd64" --amend "public.ecr.aws/gravitational/teleport-lab:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-lab:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR - production
- name: Build teleport-operator image "teleport-operator-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-operator-v10-amd64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-x86_64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-operator-v10-arm" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-arm-linux-gnueabihf" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-operator-v10-arm64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-aarch64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-amd64" "quay.io/gravitational/teleport-operator:10-amd64"
  - docker push "quay.io/gravitational/teleport-operator:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm" "quay.io/gravitational/teleport-operator:10-arm"
  - docker push "quay.io/gravitational/teleport-operator:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm64" "quay.io/gravitational/teleport-operator:10-arm64"
  - docker push "quay.io/gravitational/teleport-operator:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-operator:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-operator:10" --amend "quay.io/gravitational/teleport-operator:10-amd64"
    --amend "quay.io/gravitational/teleport-operator:10-arm" --amend "quay.io/gravitational/teleport-operator:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-operator:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-operator:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-amd64" "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm" "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm64" "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-operator:10"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-operator:10" --amend
    "public.ecr.aws/gravitational/teleport-operator:10-amd64" --amend "public.ecr.aws/gravitational/teleport-operator:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-operator:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
kind: signature
hmac: a476d9e982ce79988be3f01707541044654c4c8211ea6291a8b0bc86175e14f3

...
