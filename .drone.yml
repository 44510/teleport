---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images.go:194
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-current-version-Test trigger on push
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  event:
    include:
    - push
  repo:
    include:
    - gravitational/teleport
  branch:
    include:
    - fred/arm-container-images
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Find the latest available semver for v10
  image: golang:1.18
  commands:
  - mkdir -pv "/tmp/teleport"
  - cd "/tmp/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "branch/v10"
  - mkdir -pv "/go/vars/full-version"
  - cd "/tmp/teleport/build.assets/tooling/cmd/query-latest"
  - go run . "v10" > "/go/vars/full-version/v10"
  - echo Found full semver "$(cat "/go/vars/full-version/v10")" for major version
    "v10"
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
- name: Check out code
  image: alpine/git:latest
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "$(cat '/go/vars/full-version/v10')"
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
- name: Download "teleport" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport/amd64"
  - apt download "teleport:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm"
  - apt download "teleport:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm64"
  - apt download "teleport:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport image "teleport-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-v10-amd64-builder" --target "teleport"
    --platform "linux/amd64" --tag "teleport-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm-builder"
  - docker buildx build --load --builder "teleport-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-v10-arm64-builder" --target "teleport"
    --platform "linux/arm64" --tag "teleport-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-amd64" "quay.io/gravitational/teleport:10-amd64"
  - docker push "quay.io/gravitational/teleport:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm" "quay.io/gravitational/teleport:10-arm"
  - docker push "quay.io/gravitational/teleport:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm64" "quay.io/gravitational/teleport:10-arm64"
  - docker push "quay.io/gravitational/teleport:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport:10" --amend "quay.io/gravitational/teleport:10-amd64"
    --amend "quay.io/gravitational/teleport:10-arm" --amend "quay.io/gravitational/teleport:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...l/teleport:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-amd64" "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm" "public.ecr.aws/gravitational/teleport:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm64" "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport:10" to ECR
    - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport:10" --amend "public.ecr.aws/gravitational/teleport:10-amd64"
    --amend "public.ecr.aws/gravitational/teleport:10-arm" --amend "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
- name: Download "teleport-ent" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent/amd64"
  - apt download "teleport-ent:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm"
  - apt download "teleport-ent:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm64"
  - apt download "teleport-ent:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent image "teleport-ent-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-amd64-builder" --target
    "teleport" --platform "linux/amd64" --tag "teleport-ent-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-ent-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm64-builder" --target
    "teleport" --platform "linux/arm64" --tag "teleport-ent-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-amd64" "quay.io/gravitational/teleport-ent:10-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm" "quay.io/gravitational/teleport-ent:10-arm"
  - docker push "quay.io/gravitational/teleport-ent:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm64" "quay.io/gravitational/teleport-ent:10-arm64"
  - docker push "quay.io/gravitational/teleport-ent:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10" --amend "quay.io/gravitational/teleport-ent:10-amd64"
    --amend "quay.io/gravitational/teleport-ent:10-arm" --amend "quay.io/gravitational/teleport-ent:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-ent:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm" "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm64" "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-amd64" --amend "public.ecr.aws/gravitational/teleport-ent:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR - production
- name: Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent-fips"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent-fips/amd64"
  - apt download "teleport-ent-fips:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent-fips/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent-fips:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-fips-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-fips-v10-amd64-builder" --target
    "teleport-fips" --platform "linux/amd64" --tag "teleport-ent-fips-v10-amd64" --file
    "/go/build/Dockerfile" --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb" /go/build
  - docker buildx rm "teleport-ent-fips-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-fips-v10-amd64" "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10-fips" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10-fips" --amend "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10-fips"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-fips-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-ent:10-$TIMESTAMP-fips"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-fips-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10-fips"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10-fips" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10-fips"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR - production
- name: Build teleport-lab image "teleport-lab-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-lab-v10-amd64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-amd64" /tmp/build
  - docker buildx rm "teleport-lab-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-amd64"
- name: Build teleport-lab image "teleport-lab-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-lab-v10-arm" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm"
- name: Build teleport-lab image "teleport-lab-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-lab-v10-arm64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm64" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-amd64" "quay.io/gravitational/teleport-lab:10-amd64"
  - docker push "quay.io/gravitational/teleport-lab:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm" "quay.io/gravitational/teleport-lab:10-arm"
  - docker push "quay.io/gravitational/teleport-lab:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm64" "quay.io/gravitational/teleport-lab:10-arm64"
  - docker push "quay.io/gravitational/teleport-lab:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-lab:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-lab:10" --amend "quay.io/gravitational/teleport-lab:10-amd64"
    --amend "quay.io/gravitational/teleport-lab:10-arm" --amend "quay.io/gravitational/teleport-lab:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-lab:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-lab:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-amd64" "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm" "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm64" "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-lab:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-lab:10" --amend
    "public.ecr.aws/gravitational/teleport-lab:10-amd64" --amend "public.ecr.aws/gravitational/teleport-lab:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-lab:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR - production
- name: Build teleport-operator image "teleport-operator-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-operator-v10-amd64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-x86_64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-operator-v10-arm" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-arm-linux-gnueabihf" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-operator-v10-arm64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-aarch64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-amd64" "quay.io/gravitational/teleport-operator:10-amd64"
  - docker push "quay.io/gravitational/teleport-operator:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm" "quay.io/gravitational/teleport-operator:10-arm"
  - docker push "quay.io/gravitational/teleport-operator:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm64" "quay.io/gravitational/teleport-operator:10-arm64"
  - docker push "quay.io/gravitational/teleport-operator:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-operator:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-operator:10" --amend "quay.io/gravitational/teleport-operator:10-amd64"
    --amend "quay.io/gravitational/teleport-operator:10-arm" --amend "quay.io/gravitational/teleport-operator:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-operator:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-operator:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-amd64" "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm" "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm64" "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-operator:10"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-operator:10" --amend
    "public.ecr.aws/gravitational/teleport-operator:10-amd64" --amend "public.ecr.aws/gravitational/teleport-operator:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-operator:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images.go:194
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-current-version-cron
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  cron:
    include:
    - teleport-container-images-cron
  repo:
    include:
    - gravitational/teleport
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Find the latest available semver for v10
  image: golang:1.18
  commands:
  - mkdir -pv "/tmp/teleport"
  - cd "/tmp/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "branch/v10"
  - mkdir -pv "/go/vars/full-version"
  - cd "/tmp/teleport/build.assets/tooling/cmd/query-latest"
  - go run . "v10" > "/go/vars/full-version/v10"
  - echo Found full semver "$(cat "/go/vars/full-version/v10")" for major version
    "v10"
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
- name: Check out code
  image: alpine/git:latest
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "$(cat '/go/vars/full-version/v10')"
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
- name: Download "teleport" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport/amd64"
  - apt download "teleport:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm"
  - apt download "teleport:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm64"
  - apt download "teleport:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport image "teleport-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-v10-amd64-builder" --target "teleport"
    --platform "linux/amd64" --tag "teleport-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm-builder"
  - docker buildx build --load --builder "teleport-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-v10-arm64-builder" --target "teleport"
    --platform "linux/arm64" --tag "teleport-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-amd64" "quay.io/gravitational/teleport:10-amd64"
  - docker push "quay.io/gravitational/teleport:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm" "quay.io/gravitational/teleport:10-arm"
  - docker push "quay.io/gravitational/teleport:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v10-arm64" "quay.io/gravitational/teleport:10-arm64"
  - docker push "quay.io/gravitational/teleport:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport:10" --amend "quay.io/gravitational/teleport:10-amd64"
    --amend "quay.io/gravitational/teleport:10-arm" --amend "quay.io/gravitational/teleport:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...l/teleport:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...leport:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...port:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-amd64" "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm" "public.ecr.aws/gravitational/teleport:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v10-arm64" "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport:10" to ECR
    - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport:10" --amend "public.ecr.aws/gravitational/teleport:10-amd64"
    --amend "public.ecr.aws/gravitational/teleport:10-arm" --amend "public.ecr.aws/gravitational/teleport:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:10-arm64" to ECR - production
- name: Download "teleport-ent" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent/amd64"
  - apt download "teleport-ent:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm"
  - apt download "teleport-ent:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm/$(cat
    '/go/vars/full-version/v10').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm64"
  - apt download "teleport-ent:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent image "teleport-ent-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-amd64-builder" --target
    "teleport" --platform "linux/amd64" --tag "teleport-ent-v10-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-ent-v10-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-ent-v10-arm64-builder" --target
    "teleport" --platform "linux/arm64" --tag "teleport-ent-v10-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v10').deb"
    /go/build
  - docker buildx rm "teleport-ent-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-amd64" "quay.io/gravitational/teleport-ent:10-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm" "quay.io/gravitational/teleport-ent:10-arm"
  - docker push "quay.io/gravitational/teleport-ent:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v10-arm64" "quay.io/gravitational/teleport-ent:10-arm64"
  - docker push "quay.io/gravitational/teleport-ent:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10" --amend "quay.io/gravitational/teleport-ent:10-amd64"
    --amend "quay.io/gravitational/teleport-ent:10-arm" --amend "quay.io/gravitational/teleport-ent:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-ent:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-ent:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-ent:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm" "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v10-arm64" "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-amd64" --amend "public.ecr.aws/gravitational/teleport-ent:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-ent:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:10-arm64" to ECR - production
- name: Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent-fips"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v10')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent-fips/amd64"
  - apt download "teleport-ent-fips:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent-fips/amd64/$(cat '/go/vars/full-version/v10').deb"
  - echo "Downloaded \"teleport-ent-fips:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb\""
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-fips-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-fips-v10-amd64-builder" --target
    "teleport-fips" --platform "linux/amd64" --tag "teleport-ent-fips-v10-amd64" --file
    "/go/build/Dockerfile" --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v10').deb" /go/build
  - docker buildx rm "teleport-ent-fips-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-fips-v10-amd64" "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker push "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:10-fips" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:10-fips" --amend "quay.io/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "quay.io/gravitational/teleport-ent:10-fips"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:10-fips-amd64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-fips-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-ent:10-$TIMESTAMP-fips"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips-amd64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:10-$TIMESTAMP-fips"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...0-$TIMESTAMP-fips-amd64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-fips-v10-amd64" "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v10-amd64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:10-fips"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:10-fips" --amend
    "public.ecr.aws/gravitational/teleport-ent:10-fips-amd64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:10-fips"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-ent:10-fips-amd64" to ECR - production
- name: Build teleport-lab image "teleport-lab-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-lab-v10-amd64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-amd64" /tmp/build
  - docker buildx rm "teleport-lab-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-amd64"
- name: Build teleport-lab image "teleport-lab-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-lab-v10-arm" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm"
- name: Build teleport-lab image "teleport-lab-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-lab-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-lab-v10-arm64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v10-arm64" /tmp/build
  - docker buildx rm "teleport-lab-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v10-arm64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-amd64" "quay.io/gravitational/teleport-lab:10-amd64"
  - docker push "quay.io/gravitational/teleport-lab:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm" "quay.io/gravitational/teleport-lab:10-arm"
  - docker push "quay.io/gravitational/teleport-lab:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v10-arm64" "quay.io/gravitational/teleport-lab:10-arm64"
  - docker push "quay.io/gravitational/teleport-lab:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-lab:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-lab:10" --amend "quay.io/gravitational/teleport-lab:10-amd64"
    --amend "quay.io/gravitational/teleport-lab:10-arm" --amend "quay.io/gravitational/teleport-lab:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-lab:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-lab:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...leport-lab:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rt-lab:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...-lab:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-amd64" "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm" "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v10-arm64" "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-lab:10" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-lab:10" --amend
    "public.ecr.aws/gravitational/teleport-lab:10-amd64" --amend "public.ecr.aws/gravitational/teleport-lab:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-lab:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-lab:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:10-arm64" to ECR - production
- name: Build teleport-operator image "teleport-operator-v10-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-amd64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-amd64-builder" --platform
    "linux/amd64" --tag "teleport-operator-v10-amd64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-x86_64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm-builder" --platform
    "linux/arm" --tag "teleport-operator-v10-arm" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-arm-linux-gnueabihf" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v10-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v10-arm64-builder"
  - docker buildx build --load --builder "teleport-operator-v10-arm64-builder" --platform
    "linux/arm64" --tag "teleport-operator-v10-arm64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-aarch64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v10-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v10
  - Wait for docker
  - Check out code
- name: Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-amd64" "quay.io/gravitational/teleport-operator:10-amd64"
  - docker push "quay.io/gravitational/teleport-operator:10-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm" "quay.io/gravitational/teleport-operator:10-arm"
  - docker push "quay.io/gravitational/teleport-operator:10-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v10-arm64" "quay.io/gravitational/teleport-operator:10-arm64"
  - docker push "quay.io/gravitational/teleport-operator:10-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-operator:10" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-operator:10" --amend "quay.io/gravitational/teleport-operator:10-amd64"
    --amend "quay.io/gravitational/teleport-operator:10-arm" --amend "quay.io/gravitational/teleport-operator:10-arm64"
  - docker manifest push "quay.io/gravitational/teleport-operator:10"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-operator:10-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:10-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v10-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...-operator:10-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:10-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rator:10-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...tor:10-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-amd64" "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-amd64"
- name: Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm" "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm"
- name: Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v10-arm64" "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v10-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-operator:10"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-operator:10" --amend
    "public.ecr.aws/gravitational/teleport-operator:10-amd64" --amend "public.ecr.aws/gravitational/teleport-operator:10-arm"
    --amend "public.ecr.aws/gravitational/teleport-operator:10-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-operator:10"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...teleport-operator:10-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitat...leport-operator:10-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images.go:194
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-previous-version-1-cron
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  cron:
    include:
    - teleport-container-images-cron
  repo:
    include:
    - gravitational/teleport
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Find the latest available semver for v9
  image: golang:1.18
  commands:
  - mkdir -pv "/tmp/teleport"
  - cd "/tmp/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "branch/v9"
  - mkdir -pv "/go/vars/full-version"
  - cd "/tmp/teleport/build.assets/tooling/cmd/query-latest"
  - go run . "v9" > "/go/vars/full-version/v9"
  - echo Found full semver "$(cat "/go/vars/full-version/v9")" for major version "v9"
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
- name: Check out code
  image: alpine/git:latest
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "$(cat '/go/vars/full-version/v9')"
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
- name: Download "teleport" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v9')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport/amd64"
  - apt download "teleport:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/amd64/$(cat
    '/go/vars/full-version/v9').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm"
  - apt download "teleport:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm/$(cat
    '/go/vars/full-version/v9').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm64"
  - apt download "teleport:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm64/$(cat
    '/go/vars/full-version/v9').deb\""
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Build teleport image "teleport-v9-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v9-amd64-builder"
  - docker buildx build --load --builder "teleport-v9-amd64-builder" --target "teleport"
    --platform "linux/amd64" --tag "teleport-v9-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-v9-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v9-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v9-arm-builder"
  - docker buildx build --load --builder "teleport-v9-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-v9-arm" --file "/go/build/Dockerfile" --build-arg
    "DEB_PATH=/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-v9-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v9-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v9-arm64-builder"
  - docker buildx build --load --builder "teleport-v9-arm64-builder" --target "teleport"
    --platform "linux/arm64" --tag "teleport-v9-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-v9-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport:9-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v9-amd64" "quay.io/gravitational/teleport:9-amd64"
  - docker push "quay.io/gravitational/teleport:9-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-amd64"
- name: Tag and push "quay.io/gravitational/teleport:9-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v9-arm" "quay.io/gravitational/teleport:9-arm"
  - docker push "quay.io/gravitational/teleport:9-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm"
- name: Tag and push "quay.io/gravitational/teleport:9-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v9-arm64" "quay.io/gravitational/teleport:9-arm64"
  - docker push "quay.io/gravitational/teleport:9-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport:9" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport:9" --amend "quay.io/gravitational/teleport:9-amd64"
    --amend "quay.io/gravitational/teleport:9-arm" --amend "quay.io/gravitational/teleport:9-arm64"
  - docker manifest push "quay.io/gravitational/teleport:9"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport:9-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport:9-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport:9-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...port:9-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v9-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...leport:9-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v9-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...port:9-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v9-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...l/teleport:9-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:9-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...port:9-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...leport:9-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...port:9-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport:9-amd64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v9-amd64" "public.ecr.aws/gravitational/teleport:9-amd64"
  - docker push "public.ecr.aws/gravitational/teleport:9-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport:9-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v9-arm" "public.ecr.aws/gravitational/teleport:9-arm"
  - docker push "public.ecr.aws/gravitational/teleport:9-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport:9-arm64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v9-arm64" "public.ecr.aws/gravitational/teleport:9-arm64"
  - docker push "public.ecr.aws/gravitational/teleport:9-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v9-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport:9" to ECR
    - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport:9" --amend "public.ecr.aws/gravitational/teleport:9-amd64"
    --amend "public.ecr.aws/gravitational/teleport:9-arm" --amend "public.ecr.aws/gravitational/teleport:9-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport:9"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport:9-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:9-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:9-arm64" to ECR - production
- name: Download "teleport-ent" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v9')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent/amd64"
  - apt download "teleport-ent:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport-ent:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/amd64/$(cat
    '/go/vars/full-version/v9').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm"
  - apt download "teleport-ent:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport-ent:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm/$(cat
    '/go/vars/full-version/v9').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm64"
  - apt download "teleport-ent:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport-ent:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm64/$(cat
    '/go/vars/full-version/v9').deb\""
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Build teleport-ent image "teleport-ent-v9-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v9-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-v9-amd64-builder" --target
    "teleport" --platform "linux/amd64" --tag "teleport-ent-v9-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-ent-v9-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v9-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v9-arm-builder"
  - docker buildx build --load --builder "teleport-ent-v9-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-ent-v9-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-ent-v9-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v9-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v9-arm64-builder"
  - docker buildx build --load --builder "teleport-ent-v9-arm64-builder" --target
    "teleport" --platform "linux/arm64" --tag "teleport-ent-v9-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v9').deb"
    /go/build
  - docker buildx rm "teleport-ent-v9-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:9-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v9-amd64" "quay.io/gravitational/teleport-ent:9-amd64"
  - docker push "quay.io/gravitational/teleport-ent:9-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-amd64"
- name: Tag and push "quay.io/gravitational/teleport-ent:9-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v9-arm" "quay.io/gravitational/teleport-ent:9-arm"
  - docker push "quay.io/gravitational/teleport-ent:9-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm"
- name: Tag and push "quay.io/gravitational/teleport-ent:9-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v9-arm64" "quay.io/gravitational/teleport-ent:9-arm64"
  - docker push "quay.io/gravitational/teleport-ent:9-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:9" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:9" --amend "quay.io/gravitational/teleport-ent:9-amd64"
    --amend "quay.io/gravitational/teleport-ent:9-arm" --amend "quay.io/gravitational/teleport-ent:9-arm64"
  - docker manifest push "quay.io/gravitational/teleport-ent:9"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:9-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:9-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:9-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...-ent:9-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v9-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rt-ent:9-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v9-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...-ent:9-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v9-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...leport-ent:9-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...-ent:9-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rt-ent:9-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...-ent:9-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:9-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v9-amd64" "public.ecr.aws/gravitational/teleport-ent:9-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:9-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:9-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v9-arm" "public.ecr.aws/gravitational/teleport-ent:9-arm"
  - docker push "public.ecr.aws/gravitational/teleport-ent:9-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:9-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v9-arm64" "public.ecr.aws/gravitational/teleport-ent:9-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:9-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v9-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:9" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:9" --amend "public.ecr.aws/gravitational/teleport-ent:9-amd64"
    --amend "public.ecr.aws/gravitational/teleport-ent:9-arm" --amend "public.ecr.aws/gravitational/teleport-ent:9-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:9"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:9-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:9-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:9-arm64" to ECR - production
- name: Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent-fips"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v9')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent-fips/amd64"
  - apt download "teleport-ent-fips:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent-fips/amd64/$(cat '/go/vars/full-version/v9').deb"
  - echo "Downloaded \"teleport-ent-fips:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v9').deb\""
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Build teleport-ent-fips image "teleport-ent-fips-v9-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-fips-v9-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-fips-v9-amd64-builder" --target
    "teleport-fips" --platform "linux/amd64" --tag "teleport-ent-fips-v9-amd64" --file
    "/go/build/Dockerfile" --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v9').deb" /go/build
  - docker buildx rm "teleport-ent-fips-v9-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:9-fips-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-fips-v9-amd64" "quay.io/gravitational/teleport-ent:9-fips-amd64"
  - docker push "quay.io/gravitational/teleport-ent:9-fips-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v9-amd64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:9-fips" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:9-fips" --amend "quay.io/gravitational/teleport-ent:9-fips-amd64"
  - docker manifest push "quay.io/gravitational/teleport-ent:9-fips"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:9-fips-amd64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...:9-$TIMESTAMP-fips-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-fips-v9-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-fips-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-fips-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v9-amd64"
- name: Create manifest and push "146628656107.dkr.ecr.us...rt-ent:9-$TIMESTAMP-fips"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-fips"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-fips-amd64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:9-$TIMESTAMP-fips"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...:9-$TIMESTAMP-fips-amd64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitati...leport-ent:9-fips-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-fips-v9-amd64" "public.ecr.aws/gravitational/teleport-ent:9-fips-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:9-fips-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v9-amd64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:9-fips"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:9-fips" --amend
    "public.ecr.aws/gravitational/teleport-ent:9-fips-amd64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:9-fips"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitati...leport-ent:9-fips-amd64" to ECR - production
- name: Build teleport-lab image "teleport-lab-v9-amd64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v9-amd64-builder"
  - docker buildx build --load --builder "teleport-lab-v9-amd64-builder" --platform
    "linux/amd64" --tag "teleport-lab-v9-amd64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v9-amd64" /tmp/build
  - docker buildx rm "teleport-lab-v9-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v9-amd64"
- name: Build teleport-lab image "teleport-lab-v9-arm"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v9-arm-builder"
  - docker buildx build --load --builder "teleport-lab-v9-arm-builder" --platform
    "linux/arm" --tag "teleport-lab-v9-arm" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v9-arm" /tmp/build
  - docker buildx rm "teleport-lab-v9-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v9-arm"
- name: Build teleport-lab image "teleport-lab-v9-arm64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v9-arm64-builder"
  - docker buildx build --load --builder "teleport-lab-v9-arm64-builder" --platform
    "linux/arm64" --tag "teleport-lab-v9-arm64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v9-arm64" /tmp/build
  - docker buildx rm "teleport-lab-v9-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v9-arm64"
- name: Tag and push "quay.io/gravitational/teleport-lab:9-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v9-amd64" "quay.io/gravitational/teleport-lab:9-amd64"
  - docker push "quay.io/gravitational/teleport-lab:9-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-amd64"
- name: Tag and push "quay.io/gravitational/teleport-lab:9-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v9-arm" "quay.io/gravitational/teleport-lab:9-arm"
  - docker push "quay.io/gravitational/teleport-lab:9-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm"
- name: Tag and push "quay.io/gravitational/teleport-lab:9-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v9-arm64" "quay.io/gravitational/teleport-lab:9-arm64"
  - docker push "quay.io/gravitational/teleport-lab:9-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-lab:9" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-lab:9" --amend "quay.io/gravitational/teleport-lab:9-amd64"
    --amend "quay.io/gravitational/teleport-lab:9-arm" --amend "quay.io/gravitational/teleport-lab:9-arm64"
  - docker manifest push "quay.io/gravitational/teleport-lab:9"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-lab:9-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:9-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:9-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...-lab:9-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v9-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rt-lab:9-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v9-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...-lab:9-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v9-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...leport-lab:9-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:9-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...-lab:9-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rt-lab:9-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...-lab:9-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:9-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v9-amd64" "public.ecr.aws/gravitational/teleport-lab:9-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:9-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:9-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v9-arm" "public.ecr.aws/gravitational/teleport-lab:9-arm"
  - docker push "public.ecr.aws/gravitational/teleport-lab:9-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:9-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v9-arm64" "public.ecr.aws/gravitational/teleport-lab:9-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:9-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v9-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-lab:9" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-lab:9" --amend "public.ecr.aws/gravitational/teleport-lab:9-amd64"
    --amend "public.ecr.aws/gravitational/teleport-lab:9-arm" --amend "public.ecr.aws/gravitational/teleport-lab:9-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-lab:9"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:9-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:9-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:9-arm64" to ECR - production
- name: Build teleport-operator image "teleport-operator-v9-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v9-amd64-builder"
  - docker buildx build --load --builder "teleport-operator-v9-amd64-builder" --platform
    "linux/amd64" --tag "teleport-operator-v9-amd64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-x86_64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v9-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v9-arm"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v9-arm-builder"
  - docker buildx build --load --builder "teleport-operator-v9-arm-builder" --platform
    "linux/arm" --tag "teleport-operator-v9-arm" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-arm-linux-gnueabihf" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v9-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v9-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v9-arm64-builder"
  - docker buildx build --load --builder "teleport-operator-v9-arm64-builder" --platform
    "linux/arm64" --tag "teleport-operator-v9-arm64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-aarch64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v9-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v9
  - Wait for docker
  - Check out code
- name: Tag and push "quay.io/gravitational/teleport-operator:9-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v9-amd64" "quay.io/gravitational/teleport-operator:9-amd64"
  - docker push "quay.io/gravitational/teleport-operator:9-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-amd64"
- name: Tag and push "quay.io/gravitational/teleport-operator:9-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v9-arm" "quay.io/gravitational/teleport-operator:9-arm"
  - docker push "quay.io/gravitational/teleport-operator:9-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm"
- name: Tag and push "quay.io/gravitational/teleport-operator:9-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v9-arm64" "quay.io/gravitational/teleport-operator:9-arm64"
  - docker push "quay.io/gravitational/teleport-operator:9-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-operator:9" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-operator:9" --amend "quay.io/gravitational/teleport-operator:9-amd64"
    --amend "quay.io/gravitational/teleport-operator:9-arm" --amend "quay.io/gravitational/teleport-operator:9-arm64"
  - docker manifest push "quay.io/gravitational/teleport-operator:9"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-operator:9-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:9-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:9-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...rator:9-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v9-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...perator:9-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v9-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm"
- name: Tag and push "146628656107.dkr.ecr.us...rator:9-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v9-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...rt-operator:9-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:9-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...rator:9-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...perator:9-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rator:9-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitati...leport-operator:9-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v9-amd64" "public.ecr.aws/gravitational/teleport-operator:9-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:9-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-amd64"
- name: Tag and push "public.ecr.aws/gravitati...teleport-operator:9-arm" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v9-arm" "public.ecr.aws/gravitational/teleport-operator:9-arm"
  - docker push "public.ecr.aws/gravitational/teleport-operator:9-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm"
- name: Tag and push "public.ecr.aws/gravitati...leport-operator:9-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v9-arm64" "public.ecr.aws/gravitational/teleport-operator:9-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:9-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v9-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-operator:9"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-operator:9" --amend
    "public.ecr.aws/gravitational/teleport-operator:9-amd64" --amend "public.ecr.aws/gravitational/teleport-operator:9-arm"
    --amend "public.ecr.aws/gravitational/teleport-operator:9-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-operator:9"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitati...leport-operator:9-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitati...teleport-operator:9-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitati...leport-operator:9-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images.go:194
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-previous-version-2-cron
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  cron:
    include:
    - teleport-container-images-cron
  repo:
    include:
    - gravitational/teleport
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Find the latest available semver for v8
  image: golang:1.18
  commands:
  - mkdir -pv "/tmp/teleport"
  - cd "/tmp/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "branch/v8"
  - mkdir -pv "/go/vars/full-version"
  - cd "/tmp/teleport/build.assets/tooling/cmd/query-latest"
  - go run . "v8" > "/go/vars/full-version/v8"
  - echo Found full semver "$(cat "/go/vars/full-version/v8")" for major version "v8"
- name: Wait for docker
  image: docker
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
- name: Check out code
  image: alpine/git:latest
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin
  - git checkout -qf "$(cat '/go/vars/full-version/v8')"
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
- name: Download "teleport" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v8')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport/amd64"
  - apt download "teleport:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/amd64/$(cat
    '/go/vars/full-version/v8').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm"
  - apt download "teleport:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm/$(cat
    '/go/vars/full-version/v8').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport/arm64"
  - apt download "teleport:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport/arm64/$(cat
    '/go/vars/full-version/v8').deb\""
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Build teleport image "teleport-v8-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v8-amd64-builder"
  - docker buildx build --load --builder "teleport-v8-amd64-builder" --target "teleport"
    --platform "linux/amd64" --tag "teleport-v8-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/amd64/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-v8-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v8-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v8-arm-builder"
  - docker buildx build --load --builder "teleport-v8-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-v8-arm" --file "/go/build/Dockerfile" --build-arg
    "DEB_PATH=/go/artifacts/deb/teleport/arm/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-v8-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Build teleport image "teleport-v8-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-v8-arm64-builder"
  - docker buildx build --load --builder "teleport-v8-arm64-builder" --target "teleport"
    --platform "linux/arm64" --tag "teleport-v8-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport/arm64/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-v8-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport:8-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v8-amd64" "quay.io/gravitational/teleport:8-amd64"
  - docker push "quay.io/gravitational/teleport:8-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-amd64"
- name: Tag and push "quay.io/gravitational/teleport:8-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v8-arm" "quay.io/gravitational/teleport:8-arm"
  - docker push "quay.io/gravitational/teleport:8-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm"
- name: Tag and push "quay.io/gravitational/teleport:8-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-v8-arm64" "quay.io/gravitational/teleport:8-arm64"
  - docker push "quay.io/gravitational/teleport:8-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport:8" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport:8" --amend "quay.io/gravitational/teleport:8-amd64"
    --amend "quay.io/gravitational/teleport:8-arm" --amend "quay.io/gravitational/teleport:8-arm64"
  - docker manifest push "quay.io/gravitational/teleport:8"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport:8-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport:8-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport:8-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...port:8-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v8-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...leport:8-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v8-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...port:8-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-v8-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...l/teleport:8-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport:8-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...port:8-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...leport:8-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...port:8-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport:8-amd64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v8-amd64" "public.ecr.aws/gravitational/teleport:8-amd64"
  - docker push "public.ecr.aws/gravitational/teleport:8-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport:8-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v8-arm" "public.ecr.aws/gravitational/teleport:8-arm"
  - docker push "public.ecr.aws/gravitational/teleport:8-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport:8-arm64" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-v8-arm64" "public.ecr.aws/gravitational/teleport:8-arm64"
  - docker push "public.ecr.aws/gravitational/teleport:8-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport image "teleport-v8-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport:8" to ECR
    - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport:8" --amend "public.ecr.aws/gravitational/teleport:8-amd64"
    --amend "public.ecr.aws/gravitational/teleport:8-arm" --amend "public.ecr.aws/gravitational/teleport:8-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport:8"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport:8-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:8-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport:8-arm64" to ECR - production
- name: Download "teleport-ent" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v8')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64\", \"arm\", \"arm64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - dpkg --add-architecture "armhf"
  - dpkg --add-architecture "arm64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent/amd64"
  - apt download "teleport-ent:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport-ent:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/amd64/$(cat
    '/go/vars/full-version/v8').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm"
  - apt download "teleport-ent:armhf=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport-ent:armhf=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm/$(cat
    '/go/vars/full-version/v8').deb\""
  - mkdir -pv "/go/artifacts/deb/teleport-ent/arm64"
  - apt download "teleport-ent:arm64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport-ent:arm64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent/arm64/$(cat
    '/go/vars/full-version/v8').deb\""
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Build teleport-ent image "teleport-ent-v8-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v8-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-v8-amd64-builder" --target
    "teleport" --platform "linux/amd64" --tag "teleport-ent-v8-amd64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/amd64/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-ent-v8-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v8-arm"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v8-arm-builder"
  - docker buildx build --load --builder "teleport-ent-v8-arm-builder" --target "teleport"
    --platform "linux/arm" --tag "teleport-ent-v8-arm" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-ent-v8-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Build teleport-ent image "teleport-ent-v8-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-v8-arm64-builder"
  - docker buildx build --load --builder "teleport-ent-v8-arm64-builder" --target
    "teleport" --platform "linux/arm64" --tag "teleport-ent-v8-arm64" --file "/go/build/Dockerfile"
    --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent/arm64/$(cat '/go/vars/full-version/v8').deb"
    /go/build
  - docker buildx rm "teleport-ent-v8-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport-ent" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:8-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v8-amd64" "quay.io/gravitational/teleport-ent:8-amd64"
  - docker push "quay.io/gravitational/teleport-ent:8-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-amd64"
- name: Tag and push "quay.io/gravitational/teleport-ent:8-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v8-arm" "quay.io/gravitational/teleport-ent:8-arm"
  - docker push "quay.io/gravitational/teleport-ent:8-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm"
- name: Tag and push "quay.io/gravitational/teleport-ent:8-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-v8-arm64" "quay.io/gravitational/teleport-ent:8-arm64"
  - docker push "quay.io/gravitational/teleport-ent:8-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:8" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:8" --amend "quay.io/gravitational/teleport-ent:8-amd64"
    --amend "quay.io/gravitational/teleport-ent:8-arm" --amend "quay.io/gravitational/teleport-ent:8-arm64"
  - docker manifest push "quay.io/gravitational/teleport-ent:8"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:8-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:8-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-ent:8-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...-ent:8-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v8-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rt-ent:8-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v8-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...-ent:8-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-v8-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...leport-ent:8-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...-ent:8-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rt-ent:8-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...-ent:8-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:8-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v8-amd64" "public.ecr.aws/gravitational/teleport-ent:8-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:8-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:8-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v8-arm" "public.ecr.aws/gravitational/teleport-ent:8-arm"
  - docker push "public.ecr.aws/gravitational/teleport-ent:8-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-ent:8-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-v8-arm64" "public.ecr.aws/gravitational/teleport-ent:8-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:8-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent image "teleport-ent-v8-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:8" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:8" --amend "public.ecr.aws/gravitational/teleport-ent:8-amd64"
    --amend "public.ecr.aws/gravitational/teleport-ent:8-arm" --amend "public.ecr.aws/gravitational/teleport-ent:8-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:8"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:8-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:8-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-ent:8-arm64" to ECR - production
- name: Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
  image: ubuntu:22.04
  commands:
  - PACKAGE_NAME="teleport-ent-fips"
  - PACKAGE_VERSION="$(cat '/go/vars/full-version/v8')"
  - apt update
  - apt install --no-install-recommends -y ca-certificates curl
  - update-ca-certificates
  - mkdir -pv $(dirname "/go/build/Dockerfile")
  - curl -Ls -o "/go/build/Dockerfile" "https://raw.githubusercontent.com/gravitational/teleport/${DRONE_SOURCE_BRANCH:-master}/build.assets/charts/Dockerfile"
  - curl https://apt.releases.teleport.dev/gpg -o "/usr/share/keyrings/teleport-archive-keyring.asc"
  - . /etc/os-release
  - MAJOR_VERSION=$(echo $${PACKAGE_VERSION?} | cut -d'.' -f 1)
  - echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$${ID?}
    $${VERSION_CODENAME?} stable/$${MAJOR_VERSION?}" > /etc/apt/sources.list.d/teleport.list
  - END_TIME=$(( $(date +%s) + 1800 ))
  - TRIMMED_VERSION=$(echo $${PACKAGE_VERSION} | cut -d'v' -f 2)
  - TIMED_OUT=true
  - while [ $(date +%s) -lt $${END_TIME?} ]; do
  - echo 'Running apt update...'
  - apt update > /dev/null || true
  - '[ $(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION?} | wc -l) -ge
    1 ] && TIMED_OUT=false && break;'
  - echo 'Package not found yet, waiting another 15 seconds...'
  - sleep 15
  - done
  - '[ $${TIMED_OUT?} = true ] && echo "Timed out while looking for APT package \"$${PACKAGE_NAME}\"
    matching \"$${TRIMMED_VERSION}\"" && exit 1'
  - FULL_VERSION=$(apt-cache madison $${PACKAGE_NAME} | grep $${TRIMMED_VERSION} |
    cut -d'|' -f 2 | tr -d ' ' | head -n 1)
  - echo "Found APT package, downloading \"$${PACKAGE_NAME}=$${FULL_VERSION}\" for
    "amd64"..."
  - mkdir -pv "/tmp/apt-download"
  - cd "/tmp/apt-download"
  - dpkg --add-architecture "amd64"
  - apt update &> /dev/null || true
  - mkdir -pv "/go/artifacts/deb/teleport-ent-fips/amd64"
  - apt download "teleport-ent-fips:amd64=$${FULL_VERSION}"
  - FILENAME=$(ls)
  - echo "Downloaded file \"$${FILENAME}\""
  - mv $${FILENAME} "/go/artifacts/deb/teleport-ent-fips/amd64/$(cat '/go/vars/full-version/v8').deb"
  - echo "Downloaded \"teleport-ent-fips:amd64=$${FULL_VERSION}\" to \"/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v8').deb\""
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Build teleport-ent-fips image "teleport-ent-fips-v8-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/build" && cd "/go/build"
  - docker buildx create --driver "docker-container" --name "teleport-ent-fips-v8-amd64-builder"
  - docker buildx build --load --builder "teleport-ent-fips-v8-amd64-builder" --target
    "teleport-fips" --platform "linux/amd64" --tag "teleport-ent-fips-v8-amd64" --file
    "/go/build/Dockerfile" --build-arg "DEB_PATH=/go/artifacts/deb/teleport-ent-fips/amd64/$(cat
    '/go/vars/full-version/v8').deb" /go/build
  - docker buildx rm "teleport-ent-fips-v8-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Download "teleport-ent-fips" Dockerfile and DEB artifacts from APT
- name: Tag and push "quay.io/gravitational/teleport-ent:8-fips-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-ent-fips-v8-amd64" "quay.io/gravitational/teleport-ent:8-fips-amd64"
  - docker push "quay.io/gravitational/teleport-ent:8-fips-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v8-amd64"
- name: Create manifest and push "quay.io/gravitational/teleport-ent:8-fips" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-ent:8-fips" --amend "quay.io/gravitational/teleport-ent:8-fips-amd64"
  - docker manifest push "quay.io/gravitational/teleport-ent:8-fips"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-ent:8-fips-amd64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...:8-$TIMESTAMP-fips-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-ent-fips-v8-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-fips-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-fips-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v8-amd64"
- name: Create manifest and push "146628656107.dkr.ecr.us...rt-ent:8-$TIMESTAMP-fips"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-fips"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-fips-amd64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-ent:8-$TIMESTAMP-fips"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...:8-$TIMESTAMP-fips-amd64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitati...leport-ent:8-fips-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-ent-fips-v8-amd64" "public.ecr.aws/gravitational/teleport-ent:8-fips-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-ent:8-fips-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-ent-fips image "teleport-ent-fips-v8-amd64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-ent:8-fips"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-ent:8-fips" --amend
    "public.ecr.aws/gravitational/teleport-ent:8-fips-amd64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-ent:8-fips"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitati...leport-ent:8-fips-amd64" to ECR - production
- name: Build teleport-lab image "teleport-lab-v8-amd64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v8-amd64-builder"
  - docker buildx build --load --builder "teleport-lab-v8-amd64-builder" --platform
    "linux/amd64" --tag "teleport-lab-v8-amd64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v8-amd64" /tmp/build
  - docker buildx rm "teleport-lab-v8-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v8-amd64"
- name: Build teleport-lab image "teleport-lab-v8-arm"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v8-arm-builder"
  - docker buildx build --load --builder "teleport-lab-v8-arm-builder" --platform
    "linux/arm" --tag "teleport-lab-v8-arm" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v8-arm" /tmp/build
  - docker buildx rm "teleport-lab-v8-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v8-arm"
- name: Build teleport-lab image "teleport-lab-v8-arm64"
  image: docker
  commands:
  - mkdir -pv "/tmp/build" && cd "/tmp/build"
  - docker buildx create --driver "docker-container" --name "teleport-lab-v8-arm64-builder"
  - docker buildx build --load --builder "teleport-lab-v8-arm64-builder" --platform
    "linux/arm64" --tag "teleport-lab-v8-arm64" --file "/go/src/github.com/gravitational/teleport/docker/sshd/Dockerfile"
    --build-arg "BASE_IMAGE=teleport-v8-arm64" /tmp/build
  - docker buildx rm "teleport-lab-v8-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
  - Build teleport image "teleport-v8-arm64"
- name: Tag and push "quay.io/gravitational/teleport-lab:8-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v8-amd64" "quay.io/gravitational/teleport-lab:8-amd64"
  - docker push "quay.io/gravitational/teleport-lab:8-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-amd64"
- name: Tag and push "quay.io/gravitational/teleport-lab:8-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v8-arm" "quay.io/gravitational/teleport-lab:8-arm"
  - docker push "quay.io/gravitational/teleport-lab:8-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm"
- name: Tag and push "quay.io/gravitational/teleport-lab:8-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-lab-v8-arm64" "quay.io/gravitational/teleport-lab:8-arm64"
  - docker push "quay.io/gravitational/teleport-lab:8-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-lab:8" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-lab:8" --amend "quay.io/gravitational/teleport-lab:8-amd64"
    --amend "quay.io/gravitational/teleport-lab:8-arm" --amend "quay.io/gravitational/teleport-lab:8-arm64"
  - docker manifest push "quay.io/gravitational/teleport-lab:8"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-lab:8-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:8-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-lab:8-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us-...-lab:8-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v8-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-amd64"
- name: Tag and push "146628656107.dkr.ecr.us-...rt-lab:8-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v8-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm"
- name: Tag and push "146628656107.dkr.ecr.us-...-lab:8-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-lab-v8-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us-...leport-lab:8-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:8-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us-...-lab:8-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...rt-lab:8-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us-...-lab:8-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:8-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v8-amd64" "public.ecr.aws/gravitational/teleport-lab:8-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:8-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-amd64"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:8-arm" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v8-arm" "public.ecr.aws/gravitational/teleport-lab:8-arm"
  - docker push "public.ecr.aws/gravitational/teleport-lab:8-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm"
- name: Tag and push "public.ecr.aws/gravitational/teleport-lab:8-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-lab-v8-arm64" "public.ecr.aws/gravitational/teleport-lab:8-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-lab:8-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-lab image "teleport-lab-v8-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-lab:8" to
    ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-lab:8" --amend "public.ecr.aws/gravitational/teleport-lab:8-amd64"
    --amend "public.ecr.aws/gravitational/teleport-lab:8-arm" --amend "public.ecr.aws/gravitational/teleport-lab:8-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-lab:8"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:8-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:8-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitational/teleport-lab:8-arm64" to ECR - production
- name: Build teleport-operator image "teleport-operator-v8-amd64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v8-amd64-builder"
  - docker buildx build --load --builder "teleport-operator-v8-amd64-builder" --platform
    "linux/amd64" --tag "teleport-operator-v8-amd64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-x86_64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v8-amd64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v8-arm"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v8-arm-builder"
  - docker buildx build --load --builder "teleport-operator-v8-arm-builder" --platform
    "linux/arm" --tag "teleport-operator-v8-arm" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-arm-linux-gnueabihf" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v8-arm-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Build teleport-operator image "teleport-operator-v8-arm64"
  image: docker
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport" && cd "/go/src/github.com/gravitational/teleport"
  - docker buildx create --driver "docker-container" --name "teleport-operator-v8-arm64-builder"
  - docker buildx build --load --builder "teleport-operator-v8-arm64-builder" --platform
    "linux/arm64" --tag "teleport-operator-v8-arm64" --file "/go/src/github.com/gravitational/teleport/operator/Dockerfile"
    --build-arg "COMPILER_PACKAGE=gcc-aarch64-linux-gnu" /go/src/github.com/gravitational/teleport
  - docker buildx rm "teleport-operator-v8-arm64-builder"
  environment:
    DOCKER_BUILDKIT: "1"
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Find the latest available semver for v8
  - Wait for docker
  - Check out code
- name: Tag and push "quay.io/gravitational/teleport-operator:8-amd64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v8-amd64" "quay.io/gravitational/teleport-operator:8-amd64"
  - docker push "quay.io/gravitational/teleport-operator:8-amd64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-amd64"
- name: Tag and push "quay.io/gravitational/teleport-operator:8-arm" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v8-arm" "quay.io/gravitational/teleport-operator:8-arm"
  - docker push "quay.io/gravitational/teleport-operator:8-arm"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm"
- name: Tag and push "quay.io/gravitational/teleport-operator:8-arm64" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker tag "teleport-operator-v8-arm64" "quay.io/gravitational/teleport-operator:8-arm64"
  - docker push "quay.io/gravitational/teleport-operator:8-arm64"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm64"
- name: Create manifest and push "quay.io/gravitational/teleport-operator:8" to Quay
  image: docker
  commands:
  - docker login -u="$QUAY_USERNAME" -p="$QUAY_PASSWORD" "quay.io"
  - docker manifest create "quay.io/gravitational/teleport-operator:8" --amend "quay.io/gravitational/teleport-operator:8-amd64"
    --amend "quay.io/gravitational/teleport-operator:8-arm" --amend "quay.io/gravitational/teleport-operator:8-arm64"
  - docker manifest push "quay.io/gravitational/teleport-operator:8"
  - docker logout "quay.io"
  environment:
    QUAY_PASSWORD:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_PASSWORD
    QUAY_USERNAME:
      from_secret: TEST_PRODUCTION_QUAYIO_DOCKER_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "quay.io/gravitational/teleport-operator:8-amd64" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:8-arm" to Quay
  - Tag and push "quay.io/gravitational/teleport-operator:8-arm64" to Quay
- name: Tag and push "146628656107.dkr.ecr.us...rator:8-$TIMESTAMP-amd64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v8-amd64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-amd64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-amd64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-amd64"
- name: Tag and push "146628656107.dkr.ecr.us...perator:8-$TIMESTAMP-arm" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v8-arm" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm"
- name: Tag and push "146628656107.dkr.ecr.us...rator:8-$TIMESTAMP-arm64" to ECR -
    staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker tag "teleport-operator-v8-arm64" "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm64"
  - docker push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm64"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm64"
- name: Create manifest and push "146628656107.dkr.ecr.us...rt-operator:8-$TIMESTAMP"
    to ECR - staging
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker manifest create "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-amd64"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm"
    --amend "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP-arm64"
  - docker manifest push "146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:8-$TIMESTAMP"
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "146628656107.dkr.ecr.us...rator:8-$TIMESTAMP-amd64" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...perator:8-$TIMESTAMP-arm" to ECR - staging
  - Tag and push "146628656107.dkr.ecr.us...rator:8-$TIMESTAMP-arm64" to ECR - staging
- name: Tag and push "public.ecr.aws/gravitati...leport-operator:8-amd64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v8-amd64" "public.ecr.aws/gravitational/teleport-operator:8-amd64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:8-amd64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-amd64"
- name: Tag and push "public.ecr.aws/gravitati...teleport-operator:8-arm" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v8-arm" "public.ecr.aws/gravitational/teleport-operator:8-arm"
  - docker push "public.ecr.aws/gravitational/teleport-operator:8-arm"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm"
- name: Tag and push "public.ecr.aws/gravitati...leport-operator:8-arm64" to ECR -
    production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker tag "teleport-operator-v8-arm64" "public.ecr.aws/gravitational/teleport-operator:8-arm64"
  - docker push "public.ecr.aws/gravitational/teleport-operator:8-arm64"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Build teleport-operator image "teleport-operator-v8-arm64"
- name: Create manifest and push "public.ecr.aws/gravitational/teleport-operator:8"
    to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - TIMESTAMP=$(date -d @"$DRONE_BUILD_CREATED" '+%Y%m%d%H%M')
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - docker manifest create "public.ecr.aws/gravitational/teleport-operator:8" --amend
    "public.ecr.aws/gravitational/teleport-operator:8-amd64" --amend "public.ecr.aws/gravitational/teleport-operator:8-arm"
    --amend "public.ecr.aws/gravitational/teleport-operator:8-arm64"
  - docker manifest push "public.ecr.aws/gravitational/teleport-operator:8"
  - docker logout "public.ecr.aws"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_SECRET_ACCESS_KEY:
      from_secret: TEST_PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push "public.ecr.aws/gravitati...leport-operator:8-amd64" to ECR - production
  - Tag and push "public.ecr.aws/gravitati...teleport-operator:8-arm" to ECR - production
  - Tag and push "public.ecr.aws/gravitati...leport-operator:8-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
volumes:
- name: dockersock
  temp: {}


---
kind: pipeline
type: docker
name: promote-build

trigger:
  event:
    - promote
  target:
    - production
  repo:
    include:
      - gravitational/*

workspace:
  path: /go

clone:
  disable: true

steps:
  - name: Check if commit is tagged
    image: alpine
    commands:
      - "[ -n ${DRONE_TAG} ] || (echo 'DRONE_TAG is not set. Is the commit tagged?' && exit 1)"

  - name: Download artifacts from S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_REGION: us-west-2
    commands:
      - mkdir -p /go/artifacts
      - aws s3 sync s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}/ /go/artifacts/

  - name: Upload artifacts to production S3
    image: plugins/s3
    settings:
      bucket:
        from_secret: PRODUCTION_AWS_S3_BUCKET
      access_key:
        from_secret: PRODUCTION_AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: PRODUCTION_AWS_SECRET_ACCESS_KEY
      region: us-east-1
      acl: public-read
      source: /go/artifacts/*
      target: teleport/${DRONE_TAG##v}/
      strip_prefix: /go/artifacts/

  - name: Pull/retag Docker images
    image: docker
    settings:
      docker_staging_username:
        from_secret: QUAYIO_DOCKER_USERNAME
      docker_staging_password:
        from_secret: QUAYIO_DOCKER_PASSWORD
      docker_production_username:
        from_secret: PRODUCTION_QUAYIO_DOCKER_USERNAME
      docker_production_password:
        from_secret: PRODUCTION_QUAYIO_DOCKER_PASSWORD
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      # wait for docker to start
      - sleep 3
      - export VERSION=${DRONE_TAG##v}
      # authenticate with staging credentials
      - docker login -u="$PLUGIN_DOCKER_STAGING_USERNAME" -p="$PLUGIN_DOCKER_STAGING_PASSWORD" quay.io
      # pull 'temporary' CI-built images
      - echo "---> Pulling images for $${VERSION}"
      - docker pull quay.io/gravitational/teleport-ci:$${VERSION}
      - docker pull quay.io/gravitational/teleport-ent-ci:$${VERSION}
      - docker pull quay.io/gravitational/teleport-ent-ci:$${VERSION}-fips
      - docker pull quay.io/gravitational/teleport-operator-ci:$${VERSION}
      # retag images to production naming
      - echo "---> Tagging images for $${VERSION}"
      - docker tag quay.io/gravitational/teleport-ci:$${VERSION} quay.io/gravitational/teleport:$${VERSION}
      - docker tag quay.io/gravitational/teleport-ent-ci:$${VERSION} quay.io/gravitational/teleport-ent:$${VERSION}
      - docker tag quay.io/gravitational/teleport-ent-ci:$${VERSION}-fips quay.io/gravitational/teleport-ent:$${VERSION}-fips
      - docker tag quay.io/gravitational/teleport-operator-ci:$${VERSION} quay.io/gravitational/teleport-operator:$${VERSION}
      # reauthenticate with production credentials
      - docker logout quay.io
      - docker login -u="$PLUGIN_DOCKER_PRODUCTION_USERNAME" -p="$PLUGIN_DOCKER_PRODUCTION_PASSWORD" quay.io
      # push production images
      - echo "---> Pushing images for $${VERSION}"
      - docker push quay.io/gravitational/teleport:$${VERSION}
      - docker push quay.io/gravitational/teleport-ent:$${VERSION}
      - docker push quay.io/gravitational/teleport-ent:$${VERSION}-fips
      - docker push quay.io/gravitational/teleport-operator:$${VERSION}

  - name: Check out code
    image: docker:git
    commands:
      - |
        mkdir -p /go/src/github.com/gravitational/teleport
        cd /go/src/github.com/gravitational/teleport
        git init && git remote add origin ${DRONE_REMOTE_URL}
        git fetch origin +refs/tags/${DRONE_TAG}:
        git checkout -qf FETCH_HEAD

  - name: Download AMI timestamps
    image: docker
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
    commands:
      - apk add --no-cache aws-cli
      - mkdir -p /go/src/github.com/gravitational/teleport/assets/aws/files/build
      - aws s3 sync s3://$AWS_S3_BUCKET/teleport/ami/${DRONE_TAG##v}/ /go/src/github.com/gravitational/teleport/assets/aws/files/build

  - name: Make AMIs public
    image: docker
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_AWS_SECRET_ACCESS_KEY
    commands:
      - apk add --no-cache aws-cli bash jq make
      - cd /go/src/github.com/gravitational/teleport/assets/aws
      - |
        make change-amis-to-public-oss
        make change-amis-to-public-ent
        make change-amis-to-public-ent-fips

  # Download all previously packaged charts. This is needed to rebuild the
  # index and re-publish the repository.
  - name: "Helm: Download chart repository"
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
    commands:
      - mkdir -p /go/chart
      - aws s3 sync s3://$AWS_S3_BUCKET/ /go/chart

  - name: "Helm: Package chart repository"
    image: alpine/helm:latest
    commands:
      - cd /go/chart
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-cluster
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-kube-agent
      # copy index.html to root of the S3 bucket.
      - cp /go/src/github.com/gravitational/teleport/examples/chart/index.html /go/chart
      # this will index all previous versions of the charts downloaded from the S3 bucket,
      # plus the just-packaged charts listed above
      - helm repo index /go/chart
      - ls /go/chart

  - name: "Helm: Publish chart repository to S3"
    image: plugins/s3
    settings:
      bucket:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
      access_key:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
      region: us-east-2
      acl: public-read
      source: /go/chart/*
      target: /
      strip_prefix: /go/chart

  # NOTE: all mandatory steps for a release promotion need to go BEFORE this
  # step, as there is a chance that everything afterwards will be skipped.
  #
  # this step exits early and skips all remaining steps in the pipeline if the
  # tag looks like a pre-release, to avoid pushing pre-release RPMs and DEBs to
  # our yum / apt repos.
  - name: Check if repo is public
    image: alpine
    commands:
      - if [ "${DRONE_REPO}" != "gravitational/teleport" ]; then echo "---> Not publishing ${DRONE_REPO} packages to RPM and DEB repos" && exit 78; fi

  - name: Check if tag is prerelease
    image: golang:1.17-alpine
    commands:
      - cd /go/src/github.com/gravitational/teleport/build.assets/tooling
      - go run ./cmd/check -tag ${DRONE_TAG} -check prerelease || (echo '---> Not publishing ${DRONE_TAG} packages to RPM and DEB repos' && exit 78)

  - name: Download RPM repo contents
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: RPMREPO_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: RPMREPO_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: RPMREPO_AWS_SECRET_ACCESS_KEY
    volumes:
      - name: rpmrepo
        path: /rpmrepo
    commands:
    - mkdir -p /rpmrepo/teleport/cache
    # we explicitly want to delete anything present locally which has been deleted
    # from the upstream S3 bucket
    - aws s3 sync s3://$AWS_S3_BUCKET/teleport/ /rpmrepo/teleport/ --delete
    - mkdir -p /rpmrepo/teleport/${DRONE_TAG##v}
    - cp -a /go/artifacts/*.rpm /rpmrepo/teleport/${DRONE_TAG##v}/

  # we do this using a CentOS 7 container to make sure that the repo files are
  # compatible with older versions, also there's no createrepo package in alpine main
  - name: Regenerate RPM repo metadata
    image: centos:7
    volumes:
      - name: rpmrepo
        path: /rpmrepo
    commands:
    - yum -y install createrepo
    - createrepo --cachedir /rpmrepo/teleport/cache --update /rpmrepo/teleport

  # This step requires centos:8 to get gpg 2.2+
  # centos:7's gpg 2.0 doesn't understand the format of GPG_RPM_SIGNING_ARCHIVE
  - name: Sign RPM repo metadata
    image: centos:8
    volumes:
      - name: rpmrepo
        path: /rpmrepo
      # for in-memory tmpfs for key material
      - name: tmpfs
        path: /tmpfs
    environment:
      GNUPGHOME: /tmpfs/gnupg
      GPG_RPM_SIGNING_ARCHIVE:
        from_secret: GPG_RPM_SIGNING_ARCHIVE
    commands:
      - |
        # extract signing key
        mkdir -m0700 $GNUPGHOME
        echo "$GPG_RPM_SIGNING_ARCHIVE" | base64 -d | tar -xzf - -C $GNUPGHOME
        chown -R root:root $GNUPGHOME
      # Sign rpm repo metadata (yum clients will automatically look for and verify repodata/repomd.xml.asc)
      - gpg --batch --yes --detach-sign --armor /rpmrepo/teleport/repodata/repomd.xml
      - cat /rpmrepo/teleport/repodata/repomd.xml.asc
      - rm -rf $GNUPGHOME

  - name: Sync RPM repo changes to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: RPMREPO_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: RPMREPO_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: RPMREPO_AWS_SECRET_ACCESS_KEY
    volumes:
      - name: rpmrepo
        path: /rpmrepo
    commands:
    - aws s3 sync /rpmrepo/teleport/ s3://$AWS_S3_BUCKET/teleport/

  # This step skips all remaining steps in the pipeline if the tag
  # is not the highest semver *ever* released, to avoid publishing DEBs
  # that would cause apt users to downgrade. For more info see:
  #   https://github.com/gravitational/teleport/issues/8166
  - name: Check if tag is latest
    image: golang:1.17-alpine
    commands:
      - cd /go/src/github.com/gravitational/teleport/build.assets/tooling
      - go run ./cmd/check -tag ${DRONE_TAG} -check latest || (echo '---> Not publishing ${DRONE_REPO} packages to DEB repo' && exit 78)

  - name: Download DEB repo contents
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: DEBREPO_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: DEBREPO_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DEBREPO_AWS_SECRET_ACCESS_KEY
    volumes:
      - name: debrepo
        path: /debrepo
    commands:
    # we explicitly want to delete anything present locally which has been deleted
    # from the upstream S3 bucket
    - mkdir -p /debrepo/teleport
    - aws s3 sync s3://$AWS_S3_BUCKET/teleport /debrepo/teleport --delete

  - name: Build DEB repo
    image: ubuntu:20.04
    environment:
      DEBIAN_FRONTEND: noninteractive
      GNUPGHOME: /tmpfs/gnupg
      GPG_RPM_SIGNING_ARCHIVE:
        from_secret: GPG_RPM_SIGNING_ARCHIVE
    volumes:
      - name: dockersock
        path: /var/run
      - name: debrepo
        path: /debrepo
      # for in-memory tmpfs for key material
      - name: tmpfs
        path: /tmpfs
    commands:
      - |
        # install needed tools
        apt-get -y update && apt-get -y install curl gzip gnupg2 reprepro tar
      - |
        # write config files
        mkdir -p /go/reprepro/teleport/conf /go/reprepro/teleport/public
        # we have to keep listing "arm" even though it's not a real debian arch
        # because we have released packages for it that are currently in the
        # repo bucket, and reprepro will error out if it's told to includedeb a
        # package for an architecture that's not in its configuration
        cat << EOF > /go/reprepro/teleport/conf/distributions
        Origin: teleport
        Label: teleport
        Codename: stable
        Architectures: i386 amd64 arm armhf arm64
        Components: main
        Description: apt repository for teleport
        SignWith: 6282C411
        EOF
        cat << EOF > /go/reprepro/teleport/conf/options
        verbose
        basedir /go/reprepro/teleport
        EOF
      - |
        # extract signing key
        mkdir -m0700 $GNUPGHOME
        echo "$GPG_RPM_SIGNING_ARCHIVE" | base64 -d | tar -xzf - -C $GNUPGHOME
        chown -R root:root $GNUPGHOME
      - |
        # create repo
        cd /go/reprepro/teleport
        reprepro --outdir /go/reprepro/teleport/public includedeb stable /go/artifacts/teleport*.deb
      - |
        # clean up gnupg
        rm -rf $GNUPGHOME
      - |
        # copy artifacts to PVC
        cp -r /go/reprepro/teleport /debrepo/

  - name: Sync DEB repo changes to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: DEBREPO_AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: DEBREPO_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DEBREPO_AWS_SECRET_ACCESS_KEY
    volumes:
      - name: debrepo
        path: /debrepo
    commands:
    - aws s3 sync /debrepo/teleport/ s3://$AWS_S3_BUCKET/teleport/

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmpfs
        path: /tmpfs

volumes:
  - name: dockersock
    temp: {}
  - name: tmpfs
    temp:
      medium: memory
  # these persistent volumes cache RPMs/DEBs near Drone so that we don't need to download the
  # entire repo contents from S3 every time to build the repo, we just sync any differences
  - name: rpmrepo
    claim:
      name: drone-s3-rpmrepo-pvc
  - name: debrepo
    claim:
      name: drone-s3-debrepo-pvc
---
kind: pipeline
type: docker
name: publish-rlz

environment:
  RELCLI_BASE_URL: https://releases-staging.platform.teleport.sh
  RELCLI_IMAGE: 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/relcli:v1.1.65

trigger:
  event:
    - promote
  target:
    - production
  repo:
    include:
      - gravitational/*

workspace:
  path: /go

clone:
  disable: true

steps:
  - name: Check if commit is tagged
    image: alpine
    commands:
      - "[ -n ${DRONE_TAG} ] || (echo 'DRONE_TAG is not set. Is the commit tagged?' && exit 1)"

  - name: Pull relcli
    image: docker:git
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: TELEPORT_BUILD_USER_READ_ONLY_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: TELEPORT_BUILD_USER_READ_ONLY_SECRET
      AWS_DEFAULT_REGION: us-west-2
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache aws-cli
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - docker pull $RELCLI_IMAGE

  - name: Publish in Release API
    image: docker:git
    environment:
      RELEASES_CERT:
        from_secret: RELEASES_CERT_STAGING
      RELEASES_KEY:
        from_secret: RELEASES_KEY_STAGING
      RELCLI_CERT: /tmpfs/creds/releases.crt
      RELCLI_KEY: /tmpfs/creds/releases.key
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmpfs
        path: /tmpfs
    commands:
    - mkdir -p /tmpfs/creds
    - echo "$RELEASES_CERT" | base64 -d > "$RELCLI_CERT"
    - echo "$RELEASES_KEY" | base64 -d > "$RELCLI_KEY"
    - trap "rm -rf /tmpfs/creds" EXIT
    - |
      docker run -i -v /tmpfs/creds:/tmpfs/creds \
        -e DRONE_REPO -e DRONE_TAG -e RELCLI_BASE_URL -e RELCLI_CERT -e RELCLI_KEY \
        $RELCLI_IMAGE relcli auto_publish -f -v 6
    failure: ignore

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmpfs
        path: /tmpfs

volumes:
  - name: dockersock
    temp: {}
  - name: tmpfs
    temp:
      medium: memory
---
kind: signature
hmac: 2f3c39babb7c949710728b37ed883489d8d45e5cefff482bacedf239e58ec22f

...
