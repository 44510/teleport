//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tick.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Proto_TickServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_TickServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_TickServiceClientInterceptorFactoryProtocol? { get }

  func subscribe(
    _ request: Proto_TickRequest,
    callOptions: CallOptions?,
    handler: @escaping (Proto_Tick) -> Void
  ) -> ServerStreamingCall<Proto_TickRequest, Proto_Tick>

  func now(
    _ request: Proto_TickRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_TickRequest, Proto_Tick>
}

extension Proto_TickServiceClientProtocol {
  public var serviceName: String {
    return "proto.TickService"
  }

  /// Subscribe returns a stream of tick events
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: Proto_TickRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_Tick) -> Void
  ) -> ServerStreamingCall<Proto_TickRequest, Proto_Tick> {
    return self.makeServerStreamingCall(
      path: "/proto.TickService/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Now return current time
  ///
  /// - Parameters:
  ///   - request: Request to send to Now.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func now(
    _ request: Proto_TickRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_TickRequest, Proto_Tick> {
    return self.makeUnaryCall(
      path: "/proto.TickService/Now",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNowInterceptors() ?? []
    )
  }
}

public protocol Proto_TickServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Proto_TickRequest, Proto_Tick>]

  /// - Returns: Interceptors to use when invoking 'now'.
  func makeNowInterceptors() -> [ClientInterceptor<Proto_TickRequest, Proto_Tick>]
}

public final class Proto_TickServiceClient: Proto_TickServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_TickServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.TickService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_TickServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_TickServiceProvider: CallHandlerProvider {
  var interceptors: Proto_TickServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribe returns a stream of tick events
  func subscribe(request: Proto_TickRequest, context: StreamingResponseCallContext<Proto_Tick>) -> EventLoopFuture<GRPCStatus>

  /// Now return current time
  func now(request: Proto_TickRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Tick>
}

extension Proto_TickServiceProvider {
  public var serviceName: Substring { return "proto.TickService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_TickRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tick>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    case "Now":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_TickRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tick>(),
        interceptors: self.interceptors?.makeNowInterceptors() ?? [],
        userFunction: self.now(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Proto_TickServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<Proto_TickRequest, Proto_Tick>]

  /// - Returns: Interceptors to use when handling 'now'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNowInterceptors() -> [ServerInterceptor<Proto_TickRequest, Proto_Tick>]
}
