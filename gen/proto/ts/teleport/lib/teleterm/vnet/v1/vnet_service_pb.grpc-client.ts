/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_number,eslint_disable,add_pb_suffix,client_grpc1,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/vnet/v1/vnet_service.proto" (package "teleport.lib.teleterm.vnet.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { VnetService } from "./vnet_service_pb";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { StopResponse } from "./vnet_service_pb";
import type { StopRequest } from "./vnet_service_pb";
import type { StartResponse } from "./vnet_service_pb";
import type { StartRequest } from "./vnet_service_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * VnetService provides methods to manage a VNet instance. Only one VNet instance can be active at a
 * time.
 *
 * @generated from protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export interface IVnetServiceClient {
    /**
     * Start starts VNet for the given root cluster.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.vnet.v1.StartRequest) returns (teleport.lib.teleterm.vnet.v1.StartResponse);
     */
    start(input: StartRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StartResponse) => void): grpc.ClientUnaryCall;
    start(input: StartRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: StartResponse) => void): grpc.ClientUnaryCall;
    start(input: StartRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StartResponse) => void): grpc.ClientUnaryCall;
    start(input: StartRequest, callback: (err: grpc.ServiceError | null, value?: StartResponse) => void): grpc.ClientUnaryCall;
    /**
     * Stop stops VNet for the given root cluster.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.vnet.v1.StopRequest) returns (teleport.lib.teleterm.vnet.v1.StopResponse);
     */
    stop(input: StopRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StopResponse) => void): grpc.ClientUnaryCall;
    stop(input: StopRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: StopResponse) => void): grpc.ClientUnaryCall;
    stop(input: StopRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StopResponse) => void): grpc.ClientUnaryCall;
    stop(input: StopRequest, callback: (err: grpc.ServiceError | null, value?: StopResponse) => void): grpc.ClientUnaryCall;
}
/**
 * VnetService provides methods to manage a VNet instance. Only one VNet instance can be active at a
 * time.
 *
 * @generated from protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export class VnetServiceClient extends grpc.Client implements IVnetServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Start starts VNet for the given root cluster.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.vnet.v1.StartRequest) returns (teleport.lib.teleterm.vnet.v1.StartResponse);
     */
    start(input: StartRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StartResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StartResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: StartResponse) => void)): grpc.ClientUnaryCall {
        const method = VnetService.methods[0];
        return this.makeUnaryRequest<StartRequest, StartResponse>(`/${VnetService.typeName}/${method.name}`, (value: StartRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): StartResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Stop stops VNet for the given root cluster.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.vnet.v1.StopRequest) returns (teleport.lib.teleterm.vnet.v1.StopResponse);
     */
    stop(input: StopRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StopResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StopResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: StopResponse) => void)): grpc.ClientUnaryCall {
        const method = VnetService.methods[1];
        return this.makeUnaryRequest<StopRequest, StopResponse>(`/${VnetService.typeName}/${method.name}`, (value: StopRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): StopResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
