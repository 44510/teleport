//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: accessgraph/v1alpha/gitlab.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GitlabSyncOperation is a request to sync Gitlab resources
type GitlabSyncOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitlabSyncOperation) Reset() {
	*x = GitlabSyncOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabSyncOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabSyncOperation) ProtoMessage() {}

func (x *GitlabSyncOperation) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabSyncOperation.ProtoReflect.Descriptor instead.
func (*GitlabSyncOperation) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{0}
}

// GitlabResourceList is a request to sync Gitlab resources
type GitlabResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*GitlabResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GitlabResourceList) Reset() {
	*x = GitlabResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabResourceList) ProtoMessage() {}

func (x *GitlabResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabResourceList.ProtoReflect.Descriptor instead.
func (*GitlabResourceList) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{1}
}

func (x *GitlabResourceList) GetResources() []*GitlabResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// GitlabResource represents a Gitlab resource
type GitlabResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*GitlabResource_Group
	//	*GitlabResource_Project
	//	*GitlabResource_ProjectMember
	//	*GitlabResource_GroupMember
	Resource isGitlabResource_Resource `protobuf_oneof:"resource"`
}

func (x *GitlabResource) Reset() {
	*x = GitlabResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabResource) ProtoMessage() {}

func (x *GitlabResource) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabResource.ProtoReflect.Descriptor instead.
func (*GitlabResource) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{2}
}

func (m *GitlabResource) GetResource() isGitlabResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *GitlabResource) GetGroup() *GitlabGroup {
	if x, ok := x.GetResource().(*GitlabResource_Group); ok {
		return x.Group
	}
	return nil
}

func (x *GitlabResource) GetProject() *GitlabProject {
	if x, ok := x.GetResource().(*GitlabResource_Project); ok {
		return x.Project
	}
	return nil
}

func (x *GitlabResource) GetProjectMember() *GitlabProjectMember {
	if x, ok := x.GetResource().(*GitlabResource_ProjectMember); ok {
		return x.ProjectMember
	}
	return nil
}

func (x *GitlabResource) GetGroupMember() *GitlabGroupMember {
	if x, ok := x.GetResource().(*GitlabResource_GroupMember); ok {
		return x.GroupMember
	}
	return nil
}

type isGitlabResource_Resource interface {
	isGitlabResource_Resource()
}

type GitlabResource_Group struct {
	Group *GitlabGroup `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type GitlabResource_Project struct {
	Project *GitlabProject `protobuf:"bytes,2,opt,name=project,proto3,oneof"`
}

type GitlabResource_ProjectMember struct {
	ProjectMember *GitlabProjectMember `protobuf:"bytes,3,opt,name=project_member,json=projectMember,proto3,oneof"`
}

type GitlabResource_GroupMember struct {
	GroupMember *GitlabGroupMember `protobuf:"bytes,4,opt,name=group_member,json=groupMember,proto3,oneof"`
}

func (*GitlabResource_Group) isGitlabResource_Resource() {}

func (*GitlabResource_Project) isGitlabResource_Resource() {}

func (*GitlabResource_ProjectMember) isGitlabResource_Resource() {}

func (*GitlabResource_GroupMember) isGitlabResource_Resource() {}

// GitlabGroup represents a Gitlab group
type GitlabGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GitlabGroup) Reset() {
	*x = GitlabGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabGroup) ProtoMessage() {}

func (x *GitlabGroup) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabGroup.ProtoReflect.Descriptor instead.
func (*GitlabGroup) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{3}
}

func (x *GitlabGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabGroup) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// GitlabProject represents a Gitlab project
type GitlabProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GitlabProject) Reset() {
	*x = GitlabProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProject) ProtoMessage() {}

func (x *GitlabProject) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProject.ProtoReflect.Descriptor instead.
func (*GitlabProject) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{4}
}

func (x *GitlabProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabProject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// GitlabProjectMember represents a Gitlab project member
type GitlabProjectMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string         `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccessLevel string         `protobuf:"bytes,2,opt,name=access_level,json=accessLevel,proto3" json:"access_level,omitempty"`
	Project     *GitlabProject `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GitlabProjectMember) Reset() {
	*x = GitlabProjectMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabProjectMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProjectMember) ProtoMessage() {}

func (x *GitlabProjectMember) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProjectMember.ProtoReflect.Descriptor instead.
func (*GitlabProjectMember) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{5}
}

func (x *GitlabProjectMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabProjectMember) GetAccessLevel() string {
	if x != nil {
		return x.AccessLevel
	}
	return ""
}

func (x *GitlabProjectMember) GetProject() *GitlabProject {
	if x != nil {
		return x.Project
	}
	return nil
}

// GitlabGroupMember represents a Gitlab group member
type GitlabGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccessLevel string       `protobuf:"bytes,2,opt,name=access_level,json=accessLevel,proto3" json:"access_level,omitempty"`
	Group       *GitlabGroup `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GitlabGroupMember) Reset() {
	*x = GitlabGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabGroupMember) ProtoMessage() {}

func (x *GitlabGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabGroupMember.ProtoReflect.Descriptor instead.
func (*GitlabGroupMember) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{6}
}

func (x *GitlabGroupMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabGroupMember) GetAccessLevel() string {
	if x != nil {
		return x.AccessLevel
	}
	return ""
}

func (x *GitlabGroupMember) GetGroup() *GitlabGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

var File_accessgraph_v1alpha_gitlab_proto protoreflect.FileDescriptor

var file_accessgraph_v1alpha_gitlab_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x12, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x35, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_accessgraph_v1alpha_gitlab_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_gitlab_proto_rawDescData = file_accessgraph_v1alpha_gitlab_proto_rawDesc
)

func file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_gitlab_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_gitlab_proto_rawDescData = protoimpl.X.CompressGZIP(file_accessgraph_v1alpha_gitlab_proto_rawDescData)
	})
	return file_accessgraph_v1alpha_gitlab_proto_rawDescData
}

var file_accessgraph_v1alpha_gitlab_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_accessgraph_v1alpha_gitlab_proto_goTypes = []interface{}{
	(*GitlabSyncOperation)(nil), // 0: accessgraph.v1alpha.GitlabSyncOperation
	(*GitlabResourceList)(nil),  // 1: accessgraph.v1alpha.GitlabResourceList
	(*GitlabResource)(nil),      // 2: accessgraph.v1alpha.GitlabResource
	(*GitlabGroup)(nil),         // 3: accessgraph.v1alpha.GitlabGroup
	(*GitlabProject)(nil),       // 4: accessgraph.v1alpha.GitlabProject
	(*GitlabProjectMember)(nil), // 5: accessgraph.v1alpha.GitlabProjectMember
	(*GitlabGroupMember)(nil),   // 6: accessgraph.v1alpha.GitlabGroupMember
}
var file_accessgraph_v1alpha_gitlab_proto_depIdxs = []int32{
	2, // 0: accessgraph.v1alpha.GitlabResourceList.resources:type_name -> accessgraph.v1alpha.GitlabResource
	3, // 1: accessgraph.v1alpha.GitlabResource.group:type_name -> accessgraph.v1alpha.GitlabGroup
	4, // 2: accessgraph.v1alpha.GitlabResource.project:type_name -> accessgraph.v1alpha.GitlabProject
	5, // 3: accessgraph.v1alpha.GitlabResource.project_member:type_name -> accessgraph.v1alpha.GitlabProjectMember
	6, // 4: accessgraph.v1alpha.GitlabResource.group_member:type_name -> accessgraph.v1alpha.GitlabGroupMember
	4, // 5: accessgraph.v1alpha.GitlabProjectMember.project:type_name -> accessgraph.v1alpha.GitlabProject
	3, // 6: accessgraph.v1alpha.GitlabGroupMember.group:type_name -> accessgraph.v1alpha.GitlabGroup
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_gitlab_proto_init() }
func file_accessgraph_v1alpha_gitlab_proto_init() {
	if File_accessgraph_v1alpha_gitlab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabSyncOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabProjectMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_gitlab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accessgraph_v1alpha_gitlab_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GitlabResource_Group)(nil),
		(*GitlabResource_Project)(nil),
		(*GitlabResource_ProjectMember)(nil),
		(*GitlabResource_GroupMember)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accessgraph_v1alpha_gitlab_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_gitlab_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_gitlab_proto_depIdxs,
		MessageInfos:      file_accessgraph_v1alpha_gitlab_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_gitlab_proto = out.File
	file_accessgraph_v1alpha_gitlab_proto_rawDesc = nil
	file_accessgraph_v1alpha_gitlab_proto_goTypes = nil
	file_accessgraph_v1alpha_gitlab_proto_depIdxs = nil
}
