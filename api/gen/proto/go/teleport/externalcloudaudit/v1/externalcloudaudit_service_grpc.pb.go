// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/externalcloudaudit/v1/externalcloudaudit_service.proto

package externalcloudauditv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalCloudAuditService_GetExternalCloudAudit_FullMethodName            = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/GetExternalCloudAudit"
	ExternalCloudAuditService_GetExternalCloudAudits_FullMethodName           = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/GetExternalCloudAudits"
	ExternalCloudAuditService_CreateExternalCloudAudit_FullMethodName         = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/CreateExternalCloudAudit"
	ExternalCloudAuditService_DeleteExternalCloudAudit_FullMethodName         = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/DeleteExternalCloudAudit"
	ExternalCloudAuditService_EnableClusterExternalCloudAudit_FullMethodName  = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/EnableClusterExternalCloudAudit"
	ExternalCloudAuditService_GetClusterExternalCloudAudit_FullMethodName     = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/GetClusterExternalCloudAudit"
	ExternalCloudAuditService_DisableClusterExternalCloudAudit_FullMethodName = "/teleport.externalcloudaudit.v1.ExternalCloudAuditService/DisableClusterExternalCloudAudit"
)

// ExternalCloudAuditServiceClient is the client API for ExternalCloudAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalCloudAuditServiceClient interface {
	// GetExternalCloudAudit returns the external cloud audit configuration resource.
	GetExternalCloudAudit(ctx context.Context, in *GetExternalCloudAuditRequest, opts ...grpc.CallOption) (*GetExternalCloudAuditResponse, error)
	// GetExternalCloudAudits returns all external cloud audit configuration resources.
	GetExternalCloudAudits(ctx context.Context, in *GetExternalCloudAuditsRequest, opts ...grpc.CallOption) (*GetExternalCloudAuditsResponse, error)
	// CreateExternalCloudAudit creates a new External cloud Audit resource.
	CreateExternalCloudAudit(ctx context.Context, in *CreateExternalCloudAuditRequest, opts ...grpc.CallOption) (*CreateExternalCloudAuditResponse, error)
	// DeleteExternalCloudAudit removes External cloud Audit resource.
	// You cannot remove external cloud audit that is set as 'ClusterExternalCloudAudit'.
	// First you need to DisableClusterExternalCloudAudit or use other resource as
	// ClusterExternalCloudAudit.
	DeleteExternalCloudAudit(ctx context.Context, in *DeleteExternalCloudAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableClusterExternalCloudAudit enables external cloud audit to be used in cluster
	// based on name of external cloud audit.
	// This method cause Teleport Auth service reload.
	// Only single external cloud audit resource can be set to cluster external cloud audit resource.
	EnableClusterExternalCloudAudit(ctx context.Context, in *EnableClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*EnableClusterExternalCloudAuditResponse, error)
	// GetClusterExternalCloudAudit gets cluster external cloud audit.
	GetClusterExternalCloudAudit(ctx context.Context, in *GetClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*GetClusterExternalCloudAuditResponse, error)
	// DisableClusterExternalCloudAudit disables cluster configuration for external cloud audit.
	// This method cause Teleport Auth service reload.
	// Deleting ClusterExternalCloudAudit means disabling whole feature.
	DisableClusterExternalCloudAudit(ctx context.Context, in *DisableClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type externalCloudAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalCloudAuditServiceClient(cc grpc.ClientConnInterface) ExternalCloudAuditServiceClient {
	return &externalCloudAuditServiceClient{cc}
}

func (c *externalCloudAuditServiceClient) GetExternalCloudAudit(ctx context.Context, in *GetExternalCloudAuditRequest, opts ...grpc.CallOption) (*GetExternalCloudAuditResponse, error) {
	out := new(GetExternalCloudAuditResponse)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_GetExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) GetExternalCloudAudits(ctx context.Context, in *GetExternalCloudAuditsRequest, opts ...grpc.CallOption) (*GetExternalCloudAuditsResponse, error) {
	out := new(GetExternalCloudAuditsResponse)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_GetExternalCloudAudits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) CreateExternalCloudAudit(ctx context.Context, in *CreateExternalCloudAuditRequest, opts ...grpc.CallOption) (*CreateExternalCloudAuditResponse, error) {
	out := new(CreateExternalCloudAuditResponse)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_CreateExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) DeleteExternalCloudAudit(ctx context.Context, in *DeleteExternalCloudAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_DeleteExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) EnableClusterExternalCloudAudit(ctx context.Context, in *EnableClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*EnableClusterExternalCloudAuditResponse, error) {
	out := new(EnableClusterExternalCloudAuditResponse)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_EnableClusterExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) GetClusterExternalCloudAudit(ctx context.Context, in *GetClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*GetClusterExternalCloudAuditResponse, error) {
	out := new(GetClusterExternalCloudAuditResponse)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_GetClusterExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalCloudAuditServiceClient) DisableClusterExternalCloudAudit(ctx context.Context, in *DisableClusterExternalCloudAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalCloudAuditService_DisableClusterExternalCloudAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalCloudAuditServiceServer is the server API for ExternalCloudAuditService service.
// All implementations must embed UnimplementedExternalCloudAuditServiceServer
// for forward compatibility
type ExternalCloudAuditServiceServer interface {
	// GetExternalCloudAudit returns the external cloud audit configuration resource.
	GetExternalCloudAudit(context.Context, *GetExternalCloudAuditRequest) (*GetExternalCloudAuditResponse, error)
	// GetExternalCloudAudits returns all external cloud audit configuration resources.
	GetExternalCloudAudits(context.Context, *GetExternalCloudAuditsRequest) (*GetExternalCloudAuditsResponse, error)
	// CreateExternalCloudAudit creates a new External cloud Audit resource.
	CreateExternalCloudAudit(context.Context, *CreateExternalCloudAuditRequest) (*CreateExternalCloudAuditResponse, error)
	// DeleteExternalCloudAudit removes External cloud Audit resource.
	// You cannot remove external cloud audit that is set as 'ClusterExternalCloudAudit'.
	// First you need to DisableClusterExternalCloudAudit or use other resource as
	// ClusterExternalCloudAudit.
	DeleteExternalCloudAudit(context.Context, *DeleteExternalCloudAuditRequest) (*emptypb.Empty, error)
	// EnableClusterExternalCloudAudit enables external cloud audit to be used in cluster
	// based on name of external cloud audit.
	// This method cause Teleport Auth service reload.
	// Only single external cloud audit resource can be set to cluster external cloud audit resource.
	EnableClusterExternalCloudAudit(context.Context, *EnableClusterExternalCloudAuditRequest) (*EnableClusterExternalCloudAuditResponse, error)
	// GetClusterExternalCloudAudit gets cluster external cloud audit.
	GetClusterExternalCloudAudit(context.Context, *GetClusterExternalCloudAuditRequest) (*GetClusterExternalCloudAuditResponse, error)
	// DisableClusterExternalCloudAudit disables cluster configuration for external cloud audit.
	// This method cause Teleport Auth service reload.
	// Deleting ClusterExternalCloudAudit means disabling whole feature.
	DisableClusterExternalCloudAudit(context.Context, *DisableClusterExternalCloudAuditRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedExternalCloudAuditServiceServer()
}

// UnimplementedExternalCloudAuditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalCloudAuditServiceServer struct {
}

func (UnimplementedExternalCloudAuditServiceServer) GetExternalCloudAudit(context.Context, *GetExternalCloudAuditRequest) (*GetExternalCloudAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) GetExternalCloudAudits(context.Context, *GetExternalCloudAuditsRequest) (*GetExternalCloudAuditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalCloudAudits not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) CreateExternalCloudAudit(context.Context, *CreateExternalCloudAuditRequest) (*CreateExternalCloudAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) DeleteExternalCloudAudit(context.Context, *DeleteExternalCloudAuditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) EnableClusterExternalCloudAudit(context.Context, *EnableClusterExternalCloudAuditRequest) (*EnableClusterExternalCloudAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableClusterExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) GetClusterExternalCloudAudit(context.Context, *GetClusterExternalCloudAuditRequest) (*GetClusterExternalCloudAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) DisableClusterExternalCloudAudit(context.Context, *DisableClusterExternalCloudAuditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableClusterExternalCloudAudit not implemented")
}
func (UnimplementedExternalCloudAuditServiceServer) mustEmbedUnimplementedExternalCloudAuditServiceServer() {
}

// UnsafeExternalCloudAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalCloudAuditServiceServer will
// result in compilation errors.
type UnsafeExternalCloudAuditServiceServer interface {
	mustEmbedUnimplementedExternalCloudAuditServiceServer()
}

func RegisterExternalCloudAuditServiceServer(s grpc.ServiceRegistrar, srv ExternalCloudAuditServiceServer) {
	s.RegisterService(&ExternalCloudAuditService_ServiceDesc, srv)
}

func _ExternalCloudAuditService_GetExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).GetExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_GetExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).GetExternalCloudAudit(ctx, req.(*GetExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_GetExternalCloudAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalCloudAuditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).GetExternalCloudAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_GetExternalCloudAudits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).GetExternalCloudAudits(ctx, req.(*GetExternalCloudAuditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_CreateExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).CreateExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_CreateExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).CreateExternalCloudAudit(ctx, req.(*CreateExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_DeleteExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).DeleteExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_DeleteExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).DeleteExternalCloudAudit(ctx, req.(*DeleteExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_EnableClusterExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableClusterExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).EnableClusterExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_EnableClusterExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).EnableClusterExternalCloudAudit(ctx, req.(*EnableClusterExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_GetClusterExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).GetClusterExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_GetClusterExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).GetClusterExternalCloudAudit(ctx, req.(*GetClusterExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalCloudAuditService_DisableClusterExternalCloudAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableClusterExternalCloudAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalCloudAuditServiceServer).DisableClusterExternalCloudAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalCloudAuditService_DisableClusterExternalCloudAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalCloudAuditServiceServer).DisableClusterExternalCloudAudit(ctx, req.(*DisableClusterExternalCloudAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalCloudAuditService_ServiceDesc is the grpc.ServiceDesc for ExternalCloudAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalCloudAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.externalcloudaudit.v1.ExternalCloudAuditService",
	HandlerType: (*ExternalCloudAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_GetExternalCloudAudit_Handler,
		},
		{
			MethodName: "GetExternalCloudAudits",
			Handler:    _ExternalCloudAuditService_GetExternalCloudAudits_Handler,
		},
		{
			MethodName: "CreateExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_CreateExternalCloudAudit_Handler,
		},
		{
			MethodName: "DeleteExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_DeleteExternalCloudAudit_Handler,
		},
		{
			MethodName: "EnableClusterExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_EnableClusterExternalCloudAudit_Handler,
		},
		{
			MethodName: "GetClusterExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_GetClusterExternalCloudAudit_Handler,
		},
		{
			MethodName: "DisableClusterExternalCloudAudit",
			Handler:    _ExternalCloudAuditService_DisableClusterExternalCloudAudit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/externalcloudaudit/v1/externalcloudaudit_service.proto",
}
