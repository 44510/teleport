// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/okta/v1/okta_plugin_config_helper_service.proto

package oktav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OktaPluginConfigHelperService_GetOktaGroups_FullMethodName = "/teleport.okta.v1.OktaPluginConfigHelperService/GetOktaGroups"
	OktaPluginConfigHelperService_GetOktaApps_FullMethodName   = "/teleport.okta.v1.OktaPluginConfigHelperService/GetOktaApps"
)

// OktaPluginConfigHelperServiceClient is the client API for OktaPluginConfigHelperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OktaPluginConfigHelperServiceClient interface {
	// GetOktaGroups will return all groups known to Okta.
	GetOktaGroups(ctx context.Context, in *GetOktaGroupsRequest, opts ...grpc.CallOption) (*GetOktaGroupsResponse, error)
	// GetOktaApps will return all applications known to Okta.
	GetOktaApps(ctx context.Context, in *GetOktaAppsRequest, opts ...grpc.CallOption) (*GetOktaAppsResponse, error)
}

type oktaPluginConfigHelperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOktaPluginConfigHelperServiceClient(cc grpc.ClientConnInterface) OktaPluginConfigHelperServiceClient {
	return &oktaPluginConfigHelperServiceClient{cc}
}

func (c *oktaPluginConfigHelperServiceClient) GetOktaGroups(ctx context.Context, in *GetOktaGroupsRequest, opts ...grpc.CallOption) (*GetOktaGroupsResponse, error) {
	out := new(GetOktaGroupsResponse)
	err := c.cc.Invoke(ctx, OktaPluginConfigHelperService_GetOktaGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oktaPluginConfigHelperServiceClient) GetOktaApps(ctx context.Context, in *GetOktaAppsRequest, opts ...grpc.CallOption) (*GetOktaAppsResponse, error) {
	out := new(GetOktaAppsResponse)
	err := c.cc.Invoke(ctx, OktaPluginConfigHelperService_GetOktaApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OktaPluginConfigHelperServiceServer is the server API for OktaPluginConfigHelperService service.
// All implementations must embed UnimplementedOktaPluginConfigHelperServiceServer
// for forward compatibility
type OktaPluginConfigHelperServiceServer interface {
	// GetOktaGroups will return all groups known to Okta.
	GetOktaGroups(context.Context, *GetOktaGroupsRequest) (*GetOktaGroupsResponse, error)
	// GetOktaApps will return all applications known to Okta.
	GetOktaApps(context.Context, *GetOktaAppsRequest) (*GetOktaAppsResponse, error)
	mustEmbedUnimplementedOktaPluginConfigHelperServiceServer()
}

// UnimplementedOktaPluginConfigHelperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOktaPluginConfigHelperServiceServer struct {
}

func (UnimplementedOktaPluginConfigHelperServiceServer) GetOktaGroups(context.Context, *GetOktaGroupsRequest) (*GetOktaGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOktaGroups not implemented")
}
func (UnimplementedOktaPluginConfigHelperServiceServer) GetOktaApps(context.Context, *GetOktaAppsRequest) (*GetOktaAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOktaApps not implemented")
}
func (UnimplementedOktaPluginConfigHelperServiceServer) mustEmbedUnimplementedOktaPluginConfigHelperServiceServer() {
}

// UnsafeOktaPluginConfigHelperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OktaPluginConfigHelperServiceServer will
// result in compilation errors.
type UnsafeOktaPluginConfigHelperServiceServer interface {
	mustEmbedUnimplementedOktaPluginConfigHelperServiceServer()
}

func RegisterOktaPluginConfigHelperServiceServer(s grpc.ServiceRegistrar, srv OktaPluginConfigHelperServiceServer) {
	s.RegisterService(&OktaPluginConfigHelperService_ServiceDesc, srv)
}

func _OktaPluginConfigHelperService_GetOktaGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOktaGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktaPluginConfigHelperServiceServer).GetOktaGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OktaPluginConfigHelperService_GetOktaGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktaPluginConfigHelperServiceServer).GetOktaGroups(ctx, req.(*GetOktaGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OktaPluginConfigHelperService_GetOktaApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOktaAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktaPluginConfigHelperServiceServer).GetOktaApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OktaPluginConfigHelperService_GetOktaApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktaPluginConfigHelperServiceServer).GetOktaApps(ctx, req.(*GetOktaAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OktaPluginConfigHelperService_ServiceDesc is the grpc.ServiceDesc for OktaPluginConfigHelperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OktaPluginConfigHelperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.okta.v1.OktaPluginConfigHelperService",
	HandlerType: (*OktaPluginConfigHelperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOktaGroups",
			Handler:    _OktaPluginConfigHelperService_GetOktaGroups_Handler,
		},
		{
			MethodName: "GetOktaApps",
			Handler:    _OktaPluginConfigHelperService_GetOktaApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/okta/v1/okta_plugin_config_helper_service.proto",
}
