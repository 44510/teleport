// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/externalaudit/v1/externalaudit_service.proto

package externalauditv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalAuditService_GetExternalAudit_FullMethodName           = "/teleport.externalaudit.v1.ExternalAuditService/GetExternalAudit"
	ExternalAuditService_CreateExternalAudit_FullMethodName        = "/teleport.externalaudit.v1.ExternalAuditService/CreateExternalAudit"
	ExternalAuditService_DeleteExternalAudit_FullMethodName        = "/teleport.externalaudit.v1.ExternalAuditService/DeleteExternalAudit"
	ExternalAuditService_SetClusterExternalAudit_FullMethodName    = "/teleport.externalaudit.v1.ExternalAuditService/SetClusterExternalAudit"
	ExternalAuditService_DeleteClusterExternalAudit_FullMethodName = "/teleport.externalaudit.v1.ExternalAuditService/DeleteClusterExternalAudit"
)

// ExternalAuditServiceClient is the client API for ExternalAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAuditServiceClient interface {
	// GetExternalAudit returns the external audit configuration resource.
	GetExternalAudit(ctx context.Context, in *GetExternalAuditRequest, opts ...grpc.CallOption) (*GetExternalAuditResponse, error)
	// CreateExternalAudit creates a new External Audit resource.
	CreateExternalAudit(ctx context.Context, in *CreateExternalAuditRequest, opts ...grpc.CallOption) (*CreateExternalAuditResponse, error)
	// DeleteExternalAudit removes External Audit resource.
	// You cannot remove external audit that is set as 'ClusterExternalAudit'.
	// First you need to DeleteClusterExternalAudit or use other resource as
	// ClusterExternalAudit.
	DeleteExternalAudit(ctx context.Context, in *DeleteExternalAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetClusterExternalAudit sets external audit to be used in cluster based on
	// name of external audit.
	// This method cause Teleport Auth service reload.
	// Only single resource can be set to active state.
	SetClusterExternalAudit(ctx context.Context, in *SetClusterExternalAuditRequest, opts ...grpc.CallOption) (*SetClusterExternalAuditResponse, error)
	// DeleteClusterExternalAudit deletes cluster configuration for external audit.
	// This method cause Teleport Auth service reload.
	// Deleting ClusterExternalAudit means disabling whole feature.
	DeleteClusterExternalAudit(ctx context.Context, in *DeleteClusterExternalAuditRequest, opts ...grpc.CallOption) (*DeleteClusterExternalAuditResponse, error)
}

type externalAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuditServiceClient(cc grpc.ClientConnInterface) ExternalAuditServiceClient {
	return &externalAuditServiceClient{cc}
}

func (c *externalAuditServiceClient) GetExternalAudit(ctx context.Context, in *GetExternalAuditRequest, opts ...grpc.CallOption) (*GetExternalAuditResponse, error) {
	out := new(GetExternalAuditResponse)
	err := c.cc.Invoke(ctx, ExternalAuditService_GetExternalAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditServiceClient) CreateExternalAudit(ctx context.Context, in *CreateExternalAuditRequest, opts ...grpc.CallOption) (*CreateExternalAuditResponse, error) {
	out := new(CreateExternalAuditResponse)
	err := c.cc.Invoke(ctx, ExternalAuditService_CreateExternalAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditServiceClient) DeleteExternalAudit(ctx context.Context, in *DeleteExternalAuditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalAuditService_DeleteExternalAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditServiceClient) SetClusterExternalAudit(ctx context.Context, in *SetClusterExternalAuditRequest, opts ...grpc.CallOption) (*SetClusterExternalAuditResponse, error) {
	out := new(SetClusterExternalAuditResponse)
	err := c.cc.Invoke(ctx, ExternalAuditService_SetClusterExternalAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditServiceClient) DeleteClusterExternalAudit(ctx context.Context, in *DeleteClusterExternalAuditRequest, opts ...grpc.CallOption) (*DeleteClusterExternalAuditResponse, error) {
	out := new(DeleteClusterExternalAuditResponse)
	err := c.cc.Invoke(ctx, ExternalAuditService_DeleteClusterExternalAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuditServiceServer is the server API for ExternalAuditService service.
// All implementations must embed UnimplementedExternalAuditServiceServer
// for forward compatibility
type ExternalAuditServiceServer interface {
	// GetExternalAudit returns the external audit configuration resource.
	GetExternalAudit(context.Context, *GetExternalAuditRequest) (*GetExternalAuditResponse, error)
	// CreateExternalAudit creates a new External Audit resource.
	CreateExternalAudit(context.Context, *CreateExternalAuditRequest) (*CreateExternalAuditResponse, error)
	// DeleteExternalAudit removes External Audit resource.
	// You cannot remove external audit that is set as 'ClusterExternalAudit'.
	// First you need to DeleteClusterExternalAudit or use other resource as
	// ClusterExternalAudit.
	DeleteExternalAudit(context.Context, *DeleteExternalAuditRequest) (*emptypb.Empty, error)
	// SetClusterExternalAudit sets external audit to be used in cluster based on
	// name of external audit.
	// This method cause Teleport Auth service reload.
	// Only single resource can be set to active state.
	SetClusterExternalAudit(context.Context, *SetClusterExternalAuditRequest) (*SetClusterExternalAuditResponse, error)
	// DeleteClusterExternalAudit deletes cluster configuration for external audit.
	// This method cause Teleport Auth service reload.
	// Deleting ClusterExternalAudit means disabling whole feature.
	DeleteClusterExternalAudit(context.Context, *DeleteClusterExternalAuditRequest) (*DeleteClusterExternalAuditResponse, error)
	mustEmbedUnimplementedExternalAuditServiceServer()
}

// UnimplementedExternalAuditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAuditServiceServer struct {
}

func (UnimplementedExternalAuditServiceServer) GetExternalAudit(context.Context, *GetExternalAuditRequest) (*GetExternalAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalAudit not implemented")
}
func (UnimplementedExternalAuditServiceServer) CreateExternalAudit(context.Context, *CreateExternalAuditRequest) (*CreateExternalAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalAudit not implemented")
}
func (UnimplementedExternalAuditServiceServer) DeleteExternalAudit(context.Context, *DeleteExternalAuditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalAudit not implemented")
}
func (UnimplementedExternalAuditServiceServer) SetClusterExternalAudit(context.Context, *SetClusterExternalAuditRequest) (*SetClusterExternalAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClusterExternalAudit not implemented")
}
func (UnimplementedExternalAuditServiceServer) DeleteClusterExternalAudit(context.Context, *DeleteClusterExternalAuditRequest) (*DeleteClusterExternalAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterExternalAudit not implemented")
}
func (UnimplementedExternalAuditServiceServer) mustEmbedUnimplementedExternalAuditServiceServer() {}

// UnsafeExternalAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuditServiceServer will
// result in compilation errors.
type UnsafeExternalAuditServiceServer interface {
	mustEmbedUnimplementedExternalAuditServiceServer()
}

func RegisterExternalAuditServiceServer(s grpc.ServiceRegistrar, srv ExternalAuditServiceServer) {
	s.RegisterService(&ExternalAuditService_ServiceDesc, srv)
}

func _ExternalAuditService_GetExternalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditServiceServer).GetExternalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditService_GetExternalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditServiceServer).GetExternalAudit(ctx, req.(*GetExternalAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditService_CreateExternalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditServiceServer).CreateExternalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditService_CreateExternalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditServiceServer).CreateExternalAudit(ctx, req.(*CreateExternalAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditService_DeleteExternalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditServiceServer).DeleteExternalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditService_DeleteExternalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditServiceServer).DeleteExternalAudit(ctx, req.(*DeleteExternalAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditService_SetClusterExternalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClusterExternalAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditServiceServer).SetClusterExternalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditService_SetClusterExternalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditServiceServer).SetClusterExternalAudit(ctx, req.(*SetClusterExternalAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditService_DeleteClusterExternalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterExternalAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditServiceServer).DeleteClusterExternalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditService_DeleteClusterExternalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditServiceServer).DeleteClusterExternalAudit(ctx, req.(*DeleteClusterExternalAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuditService_ServiceDesc is the grpc.ServiceDesc for ExternalAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.externalaudit.v1.ExternalAuditService",
	HandlerType: (*ExternalAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalAudit",
			Handler:    _ExternalAuditService_GetExternalAudit_Handler,
		},
		{
			MethodName: "CreateExternalAudit",
			Handler:    _ExternalAuditService_CreateExternalAudit_Handler,
		},
		{
			MethodName: "DeleteExternalAudit",
			Handler:    _ExternalAuditService_DeleteExternalAudit_Handler,
		},
		{
			MethodName: "SetClusterExternalAudit",
			Handler:    _ExternalAuditService_SetClusterExternalAudit_Handler,
		},
		{
			MethodName: "DeleteClusterExternalAudit",
			Handler:    _ExternalAuditService_DeleteClusterExternalAudit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/externalaudit/v1/externalaudit_service.proto",
}
