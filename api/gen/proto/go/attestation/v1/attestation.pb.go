// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/attestation/v1/attestation.proto

package attestationv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttestationStatement is an attestation statement for a hardware private key.
type AttestationStatement struct {
	// Types that are valid to be assigned to AttestationStatement:
	//
	//	*AttestationStatement_YubikeyAttestationStatement
	//	*AttestationStatement_WebSessionAttestationStatement
	AttestationStatement isAttestationStatement_AttestationStatement `protobuf_oneof:"attestation_statement"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *AttestationStatement) Reset()         { *m = AttestationStatement{} }
func (m *AttestationStatement) String() string { return proto.CompactTextString(m) }
func (*AttestationStatement) ProtoMessage()    {}
func (*AttestationStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_99516272d9ee5937, []int{0}
}
func (m *AttestationStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationStatement.Merge(m, src)
}
func (m *AttestationStatement) XXX_Size() int {
	return m.Size()
}
func (m *AttestationStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationStatement.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationStatement proto.InternalMessageInfo

type isAttestationStatement_AttestationStatement interface {
	isAttestationStatement_AttestationStatement()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AttestationStatement_YubikeyAttestationStatement struct {
	YubikeyAttestationStatement *YubiKeyAttestationStatement `protobuf:"bytes,1,opt,name=yubikey_attestation_statement,json=yubikeyAttestationStatement,proto3,oneof" json:"yubikey_attestation_statement,omitempty"`
}
type AttestationStatement_WebSessionAttestationStatement struct {
	WebSessionAttestationStatement *WebSessionAttestationStatement `protobuf:"bytes,2,opt,name=web_session_attestation_statement,json=webSessionAttestationStatement,proto3,oneof" json:"web_session_attestation_statement,omitempty"`
}

func (*AttestationStatement_YubikeyAttestationStatement) isAttestationStatement_AttestationStatement() {
}
func (*AttestationStatement_WebSessionAttestationStatement) isAttestationStatement_AttestationStatement() {
}

func (m *AttestationStatement) GetAttestationStatement() isAttestationStatement_AttestationStatement {
	if m != nil {
		return m.AttestationStatement
	}
	return nil
}

func (m *AttestationStatement) GetYubikeyAttestationStatement() *YubiKeyAttestationStatement {
	if x, ok := m.GetAttestationStatement().(*AttestationStatement_YubikeyAttestationStatement); ok {
		return x.YubikeyAttestationStatement
	}
	return nil
}

func (m *AttestationStatement) GetWebSessionAttestationStatement() *WebSessionAttestationStatement {
	if x, ok := m.GetAttestationStatement().(*AttestationStatement_WebSessionAttestationStatement); ok {
		return x.WebSessionAttestationStatement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttestationStatement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttestationStatement_YubikeyAttestationStatement)(nil),
		(*AttestationStatement_WebSessionAttestationStatement)(nil),
	}
}

// YubiKeyAttestationStatement is an attestation statement for a specific YubiKey PIV slot.
type YubiKeyAttestationStatement struct {
	// slot_cert is an attestation certificate generated from a YubiKey PIV
	// slot's public key and signed by the YubiKey's attestation certificate.
	SlotCert []byte `protobuf:"bytes,1,opt,name=slot_cert,json=slotCert,proto3" json:"slot_cert,omitempty"`
	// attestation_cert is the YubiKey's unique attestation certificate, signed by a Yubico CA.
	AttestationCert      []byte   `protobuf:"bytes,2,opt,name=attestation_cert,json=attestationCert,proto3" json:"attestation_cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YubiKeyAttestationStatement) Reset()         { *m = YubiKeyAttestationStatement{} }
func (m *YubiKeyAttestationStatement) String() string { return proto.CompactTextString(m) }
func (*YubiKeyAttestationStatement) ProtoMessage()    {}
func (*YubiKeyAttestationStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_99516272d9ee5937, []int{1}
}
func (m *YubiKeyAttestationStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YubiKeyAttestationStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YubiKeyAttestationStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YubiKeyAttestationStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YubiKeyAttestationStatement.Merge(m, src)
}
func (m *YubiKeyAttestationStatement) XXX_Size() int {
	return m.Size()
}
func (m *YubiKeyAttestationStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_YubiKeyAttestationStatement.DiscardUnknown(m)
}

var xxx_messageInfo_YubiKeyAttestationStatement proto.InternalMessageInfo

func (m *YubiKeyAttestationStatement) GetSlotCert() []byte {
	if m != nil {
		return m.SlotCert
	}
	return nil
}

func (m *YubiKeyAttestationStatement) GetAttestationCert() []byte {
	if m != nil {
		return m.AttestationCert
	}
	return nil
}

// WebSessionAttestationStatement is an attestation statement for a specific YubiKey PIV slot.
type WebSessionAttestationStatement struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebSessionAttestationStatement) Reset()         { *m = WebSessionAttestationStatement{} }
func (m *WebSessionAttestationStatement) String() string { return proto.CompactTextString(m) }
func (*WebSessionAttestationStatement) ProtoMessage()    {}
func (*WebSessionAttestationStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_99516272d9ee5937, []int{2}
}
func (m *WebSessionAttestationStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebSessionAttestationStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebSessionAttestationStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebSessionAttestationStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebSessionAttestationStatement.Merge(m, src)
}
func (m *WebSessionAttestationStatement) XXX_Size() int {
	return m.Size()
}
func (m *WebSessionAttestationStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_WebSessionAttestationStatement.DiscardUnknown(m)
}

var xxx_messageInfo_WebSessionAttestationStatement proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AttestationStatement)(nil), "teleport.attestation.v1.AttestationStatement")
	proto.RegisterType((*YubiKeyAttestationStatement)(nil), "teleport.attestation.v1.YubiKeyAttestationStatement")
	proto.RegisterType((*WebSessionAttestationStatement)(nil), "teleport.attestation.v1.WebSessionAttestationStatement")
}

func init() {
	proto.RegisterFile("teleport/attestation/v1/attestation.proto", fileDescriptor_99516272d9ee5937)
}

var fileDescriptor_99516272d9ee5937 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x49, 0xcd, 0x49,
	0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x4f, 0x2c, 0x29, 0x49, 0x2d, 0x2e, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2f, 0x33, 0x44, 0xe6, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0xc3, 0x94, 0xea,
	0x21, 0xcb, 0x95, 0x19, 0x2a, 0x6d, 0x62, 0xe2, 0x12, 0x71, 0x44, 0x08, 0x05, 0x97, 0x24, 0x96,
	0xa4, 0xe6, 0xa6, 0xe6, 0x95, 0x08, 0x55, 0x71, 0xc9, 0x56, 0x96, 0x26, 0x65, 0x66, 0xa7, 0x56,
	0xc6, 0x23, 0x69, 0x89, 0x2f, 0x86, 0x29, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x32, 0xd1,
	0xc3, 0x61, 0xb2, 0x5e, 0x64, 0x69, 0x52, 0xa6, 0x77, 0x6a, 0x25, 0x36, 0xc3, 0x3d, 0x18, 0x82,
	0xa4, 0xa1, 0x86, 0x63, 0xb5, 0xbb, 0x85, 0x91, 0x4b, 0xb1, 0x3c, 0x35, 0x29, 0xbe, 0x38, 0xb5,
	0xb8, 0x18, 0x64, 0x29, 0x76, 0x07, 0x30, 0x81, 0x1d, 0x60, 0x8e, 0xd3, 0x01, 0xe1, 0xa9, 0x49,
	0xc1, 0x10, 0x03, 0x70, 0xb8, 0x41, 0xae, 0x1c, 0xaf, 0x0a, 0x27, 0x71, 0x2e, 0x51, 0xac, 0x36,
	0x2b, 0xa5, 0x72, 0x49, 0xe3, 0xf1, 0x9d, 0x90, 0x34, 0x17, 0x67, 0x71, 0x4e, 0x7e, 0x49, 0x7c,
	0x72, 0x6a, 0x11, 0x24, 0x98, 0x78, 0x82, 0x38, 0x40, 0x02, 0xce, 0xa9, 0x45, 0x25, 0x42, 0x9a,
	0x5c, 0x02, 0xc8, 0x86, 0x82, 0xd5, 0x30, 0x81, 0xd5, 0xf0, 0x23, 0x89, 0x83, 0x94, 0x2a, 0x29,
	0x70, 0xc9, 0xe1, 0xf7, 0x83, 0x53, 0xec, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x18, 0xe5, 0x9f, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab,
	0x9f, 0x5e, 0x94, 0x58, 0x96, 0x09, 0x51, 0x9e, 0x98, 0xa3, 0x8f, 0x48, 0x28, 0x05, 0x99, 0xfa,
	0xe9, 0xa9, 0x79, 0xfa, 0xe0, 0x54, 0xa1, 0x9f, 0x9e, 0x8f, 0x96, 0x72, 0xac, 0x91, 0xb8, 0x65,
	0x86, 0x49, 0x6c, 0x60, 0x65, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0xa9, 0xd2, 0xd0,
	0x69, 0x02, 0x00, 0x00,
}

func (m *AttestationStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AttestationStatement != nil {
		{
			size := m.AttestationStatement.Size()
			i -= size
			if _, err := m.AttestationStatement.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttestationStatement_YubikeyAttestationStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationStatement_YubikeyAttestationStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.YubikeyAttestationStatement != nil {
		{
			size, err := m.YubikeyAttestationStatement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AttestationStatement_WebSessionAttestationStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationStatement_WebSessionAttestationStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebSessionAttestationStatement != nil {
		{
			size, err := m.WebSessionAttestationStatement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *YubiKeyAttestationStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YubiKeyAttestationStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YubiKeyAttestationStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AttestationCert) > 0 {
		i -= len(m.AttestationCert)
		copy(dAtA[i:], m.AttestationCert)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.AttestationCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SlotCert) > 0 {
		i -= len(m.SlotCert)
		copy(dAtA[i:], m.SlotCert)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.SlotCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebSessionAttestationStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebSessionAttestationStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebSessionAttestationStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttestationStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestationStatement != nil {
		n += m.AttestationStatement.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationStatement_YubikeyAttestationStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.YubikeyAttestationStatement != nil {
		l = m.YubikeyAttestationStatement.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}
func (m *AttestationStatement_WebSessionAttestationStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebSessionAttestationStatement != nil {
		l = m.WebSessionAttestationStatement.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}
func (m *YubiKeyAttestationStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlotCert)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.AttestationCert)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebSessionAttestationStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttestation(x uint64) (n int) {
	return sovAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttestationStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YubikeyAttestationStatement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &YubiKeyAttestationStatement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttestationStatement = &AttestationStatement_YubikeyAttestationStatement{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebSessionAttestationStatement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebSessionAttestationStatement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttestationStatement = &AttestationStatement_WebSessionAttestationStatement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YubiKeyAttestationStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YubiKeyAttestationStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YubiKeyAttestationStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotCert = append(m.SlotCert[:0], dAtA[iNdEx:postIndex]...)
			if m.SlotCert == nil {
				m.SlotCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationCert = append(m.AttestationCert[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationCert == nil {
				m.AttestationCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebSessionAttestationStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebSessionAttestationStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebSessionAttestationStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttestation = fmt.Errorf("proto: unexpected end of group")
)
